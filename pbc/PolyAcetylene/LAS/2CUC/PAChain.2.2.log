#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/PolyAcetyleneChain/Repeat/2CUC/polyacetylene.las.py ****
import os
import sys
import pickle
import numpy as np
from functools import reduce
from pyscf import lib
from pyscf.pbc import scf, df
from pyscf.pbc import gto as pgto
from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
from mrh.my_pyscf.lassi import lassi
from mrh.my_pyscf import mcpdft
from periodiclas.tools import sign_control, util

def get_xyz(nU=1, d= 2.47):
    coords = [
    ("C", -0.5892731038,  0.3262391909,  0.0000000000),
    ("H", -0.5866101958,  1.4126530287,  0.0000000000),
    ("C",  0.5916281105, -0.3261693897,  0.0000000000),
    ("H",  0.5889652025, -1.4125832275,  0.0000000000)]

    translated_coords = []
    for t in range(nU):
        shift = t * d
        translated_coords.extend([(elem, x + shift, y, z) 
            for elem, x, y, z in coords])
    return translated_coords


def getCell(nC, nU=1, d=2.47, maxMem=500000, basis='321G', pseudo=None):
    """
    Build the Cell object
    """
    cell = pgto.Cell()
    cell.atom = get_xyz(nU, d)
    cell.a = np.diag([2.47*nU, 17.5, 17.5])
    cell.basis = basis
    cell.pseudo = pseudo
    cell.precision=1e-12
    cell.verbose = lib.logger.INFO
    cell.max_memory = maxMem
    cell.output = f"PAChain.{2}.{nC}.log"
    cell.build()
    return cell

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]

    mo_coeff = mf.mo_coeff

    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def get_gdf(filename, restart=True):
    """
    Calculate the 2e Integrals
    Using the Gaussian Density Fitting.
    """
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename


def runSCF(cell, nC):
    """
    Mean-Field Calculation
    """
    kmf = scf.ROHF(cell).density_fit()
    kmf.max_cycle=1000
    kmf.chkfile = f'PAchain.{nC}.chk'
    kmf.with_df._cderi = get_gdf(kmf.chkfile.rstrip('.chk')+'.h5') #, restart=False) 
    kmf.exxdiv = None
    kmf.conv_tol = 1e-12
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf


def genModelSpace(nfrags):
    """
    Model Space Creation for LAS Band Structure
    """
    identity = np.eye(nfrags, dtype=int)
    las_charges = [[0] * nfrags] + identity.tolist() + (-identity).tolist()
    las_spins = [[0] * nfrags] + identity.tolist() + identity.tolist()
    las_smults = [[1] * nfrags] + (identity + 1).tolist() + (identity + 1).tolist()

    nrootspaces = len(las_charges)
    las_weights = np.full(nrootspaces, 1/nrootspaces)

    return las_weights, las_charges, las_spins, las_smults


def runLASSCF(nCfrag, nfrags, cell, kmf):
    """
    Optimize the Individual Fragment LAS
    """
    nC = nCfrag*nfrags

    # Active Space
    norb  = tuple([nCfrag,]*nfrags)
    nele  = tuple([nCfrag,]*nfrags)
    nspin = tuple([1,]*nfrags)
    
    # Fragmentation
    frags =[[i * 4, i * 4 + 2] for i in range(nfrags)]
    
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    orblst = initguess(cell, kmf, ['C 2pz', 'C 3pz'], 2*nC)[:nC]
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    las.mo_coeff = las.localize_init_guess(frags,sortedmo)
    las.mo_coeff = sign_control.fix_mos(las)
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    las.lasci_()
    return las

def processlas(las):
    """
    Sign-Fixing for the LAS CI Vectos
    """
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las


def runLASSI(las):
    """
    LAS State Interaction
    """
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, nCfrag=2, nC=2, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    nfrags = int(nC/nCfrag)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "nfrags":nfrags,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}

    with open(f"PAChain.{nCfrag}.{nC}.pkl", "wb") as f:
        pickle.dump(data, f)

if __name__ == "__main__":

    nC = int(sys.argv[1]) # No of CH-atoms
    nCfrag = min(2, nC)
    nfrags = int(nC/nCfrag)
    assert nC%2==0
    d = 2.47

    cell =  getCell(nC, nU=nfrags, d=d, maxMem=900000, basis='321G')

    kmf = runSCF(cell, nC)

    las = runLASSCF(nCfrag, nfrags, cell, kmf)
    las = processlas(las)

    lsi,energies_lassi = runLASSI(las)
    IP_LASSI, EA_LASSI = getBANDGAP(nC, lsi, energies_lassi)

    energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
    IP_PDFT, EA_PDFT = getBANDGAP(nC, lsi,np.asarray(energies_mcpdft))
    
    print("Results: LASSI ", )
    print("Ionization Energy: ", IP_LASSI)
    print("ElectAtt   Energy: ", EA_LASSI)
    print("Band Gap: ", IP_LASSI-EA_LASSI)

    print("Results: PDFT", )
    print("Ionization Energy: ", IP_PDFT)
    print("ElectAtt   Energy: ", EA_PDFT)
    print("Band Gap: ", IP_PDFT-EA_PDFT)
    
    savepickel(kmf, lsi, pdftenergy=energies_mcpdft, nCfrag=nCfrag, nC=nC, R=2.47)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0314.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 32
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar  8 19:47:55 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 4
[INPUT] num. electrons = 14
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 C     -0.589273103800   0.326239190900   0.000000000000 AA   -1.113564778754   0.616502721901   0.000000000000 Bohr   0.0
[INPUT]  2 H     -0.586610195800   1.412653028700   0.000000000000 AA   -1.108532611939   2.669527333280   0.000000000000 Bohr   0.0
[INPUT]  3 C      0.591628110500  -0.326169389700   0.000000000000 AA    1.118015096439  -0.616370816750   0.000000000000 Bohr   0.0
[INPUT]  4 H      0.588965202500  -1.412583227500   0.000000000000 AA    1.112982929624  -2.669395428129   0.000000000000 Bohr   0.0

nuclear repulsion = 47.7395420522365
number of shells = 14
number of NR pGTOs = 36
number of NR cGTOs = 22
basis = 321G
ecp = {}
CPU time:         7.75
lattice vectors  a1 [4.667623528, 0.000000000, 0.000000000]
                 a2 [0.000000000, 33.070207180, 0.000000000]
                 a3 [0.000000000, 0.000000000, 33.070207180]
dimension = 3
low_dim_ft_type = None
Cell volume = 5104.69
rcut = 20.04810639385171 (nimgs = [5 1 1])
lattice sum = 59 cells
precision = 1e-12
pseudo = None
ke_cutoff = 20215.295844348162
    = [ 301 2119 2119] mesh (1351538461 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = None
_cderi_to_save = PAchain.2.h5
len(kpts) = 1
Default auxbasis def2-svp-jkfit is used for H 321G
Default auxbasis def2-svp-jkfit is used for C 321G
Drop 0 primitive fitting functions
make aux basis, num shells = 62, num cGTOs = 186
auxcell.rcut 24.28800816642883


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [ 9 49 49] (21609 PWs)
ke_cutoff = 10.39629018186623
omega = 0.34621218152489003
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-12
SCF conv_tol_grad = None
SCF max_cycles = 1000
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = PAchain.2.chk
max_memory 900000 MB (current use 469 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f3defb6e940>
number of electrons per cell  alpha = 7 beta = 7
Set gradient conv threshold to 1e-06


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -77.598776656805
  HOMO = -0.447541801001128  LUMO = 0.1105216735791
cycle= 1 E= -78.0849299408592  delta_E= -0.486  |g|= 0.244  |ddm|= 1.52
  HOMO = -0.686895996400359  LUMO = 0.2161636929419
cycle= 2 E= -78.100472035765  delta_E= -0.0155  |g|= 0.0582  |ddm|= 0.212
  HOMO = -0.706733895190974  LUMO = 0.223118994319353
cycle= 3 E= -78.1019090647458  delta_E= -0.00144  |g|= 0.0133  |ddm|= 0.087
  HOMO = -0.703909363893428  LUMO = 0.228554632214988
cycle= 4 E= -78.1019916207958  delta_E= -8.26e-05  |g|= 0.00236  |ddm|= 0.0203
  HOMO = -0.704433681379345  LUMO = 0.228582785506538
cycle= 5 E= -78.1019944828147  delta_E= -2.86e-06  |g|= 0.000278  |ddm|= 0.00281
  HOMO = -0.704389407466637  LUMO = 0.228634911682027
cycle= 6 E= -78.1019945201943  delta_E= -3.74e-08  |g|= 5.08e-05  |ddm|= 0.000328
  HOMO = -0.704381490511527  LUMO = 0.228630614001182
cycle= 7 E= -78.1019945214838  delta_E= -1.29e-09  |g|= 4.14e-06  |ddm|= 7.54e-05
  HOMO = -0.704381878125277  LUMO = 0.228631947086997
cycle= 8 E= -78.1019945214925  delta_E= -8.67e-12  |g|= 8.13e-07  |ddm|= 7.31e-06
  HOMO = -0.704381784702899  LUMO = 0.228631709184219
cycle= 9 E= -78.1019945214928  delta_E= -2.84e-13  |g|= 1.6e-07  |ddm|= 1.25e-06
  HOMO = -0.704381821537089  LUMO = 0.228631747940469
Extra cycle  E= -78.1019945214926  delta_E= 1.71e-13  |g|= 6.53e-08  |ddm|= 1.41e-07
converged SCF energy = -78.1019945214926


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.003362e-01 ; sigma = 0.000000e+00 ; 0/1 fragment CI solvers converged
Cycle 1: max grad = 4.440892e-16 ; sigma = 0.000000e+00 ; 1/1 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 1 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 5.589005e-06 ; sigma = 0.000000e+00 ; 0/1 fragment CI solvers converged
Cycle 1: max grad = 1.262177e-29 ; sigma = 0.000000e+00 ; 1/1 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 1 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.632253e-06 ; sigma = 0.000000e+00 ; 0/1 fragment CI solvers converged
Cycle 1: max grad = 1.262177e-29 ; sigma = 0.000000e+00 ; 1/1 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 1 cycles
LASCI state-average energy = -77.7686166114004
LASCI state 0 energy = -78.1117527029742
LASCI state 1 energy = -77.3812182609284
LASCI state 2 energy = -77.8128788702985
******** LAS space tables ********
LAS space 0: (1e+1e,2o) wfynsm=A
Converged? True
E(LAS) = -78.1117527029742
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0    (1e+1e,2o)     1    A        1
LAS space 1: (1e+0e,2o) wfynsm=A
Converged? True
E(LAS) = -77.3812182609284
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0    (1e+0e,2o)     2    A        1
LAS space 2: (2e+1e,2o) wfynsm=A
Converged? True
E(LAS) = -77.8128788702985
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0    (2e+1e,2o)     2    A        1
LASSI op_o0 memory check: 0.0001536 MB needed of 899500.955648 MB available (900000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 3 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0    -78.1117527030   0.000       1       1       2       A
  1    -77.3812182609   0.750       1       0       1       A
  2    -77.8128788703   0.750       2       1       3       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (1, 0, 0)
(1 rootspaces; 1 states)
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (1, 1, 0)
(1 rootspaces; 1 states)
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (2, 1, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (3 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0    -78.1117527030   0.000       1       1       A
  1    -77.8128788703   0.750       2       1       A
  2    -77.3812182609   0.750       1       0       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 0.0001536 MB needed of 899498.887168 MB available (900000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -76.89128256118894, Eot(tPBE) = -11.40477445328969


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -76.55314281792411, Eot(tPBE) = -11.855356202182834


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 65 65] (46475 PWs)
ke_cutoff = 18.482293656651073
omega = 0.4861347592341985
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -76.23194692174967, Eot(tPBE) = -10.947315858644343
