#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/PaperData/H-Chain/DFT/hchain.HSE06.py ****
import sys
import os
import pickle
import numpy as np
import pandas as pd
from pyscf.pbc import scf, df
from pyscf.pbc import gto as pgto
from pyscf import mcscf, dmrgscf, lib


def getCell(nH, XC='PBE', basis='STO-6G',maxMem=200000, R=1.4):
    """
    Build the Cell object
    """
    cell = pgto.Cell()
    cell.basis=basis
    cell.a = np.diag([nH*R, 17.479, 17.479])
    cell.atom = [['H', np.array([i*R, 0, 0]) ] for i in range(nH)]
    cell.verbose = lib.logger.INFO
    cell.output = f"HChain.{XC}.{nH}.log"
    cell.max_memory = maxMem
    cell.dimension=1
    cell.precision = 1e-12
    cell.build()
    return cell

def runDFT(cell, nH, nkpts, XC='PBE'):
    """
    Mean-Field Calculation
    """
    if not XC == 'HF':
        kmf = scf.KRKS(cell).density_fit()
        kmf.xc = XC
    else:
        kmf = scf.KRHF(cell).density_fit()

    kmf.max_cycle=50
    kmf.kpts = cell.make_kpts([nkpts,1, 1])
    kmf.chkfile = f'Hchain.{XC}.{nH}.chk'
    kmf.with_df.j_only = False
    kmf.conv_tol = 1e-12
    kmf.exxdiv = None
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf


def get_bands(cell, kmf, nH, nkpts, R=1.4):
    '''
    For the converged kmf, get the band structure at kpts
    '''
    kpts = kmf.kpts
    energies, mos = kmf.get_bands(kpts)
    energies = np.vstack(energies)
    kptsnorm = np.arange(nkpts)/nkpts 

    kptsnorm = np.hstack([kptsnorm, np.array(1)]) #append gamma at end

    df = pd.DataFrame()
    for i in range(energies.shape[1]):
        e_band = energies[:,i]
        e_band = np.hstack([e_band,np.array(e_band[0])])
        for k, e in zip(kptsnorm,e_band):
            df.loc[k,i] = e
        df.loc["nocc",i] = kmf.mo_occ[0][i]
    return df

class PeriodicDataAnalysis:
    '''
    Some functions to analyze the periodic DFT data
    '''
    def __init__(self, nH, XC, df):
        self.df = df
        self.nH = nH
        self.XC = XC
        self.mo_occ = self.df.loc["nocc"]
        self.df = self.df.drop("nocc")
        self.hartree_to_ev = 27.21139

    def get_homo(self):
        df = self.df.copy()
        homo_idx = np.where(self.mo_occ == 2)[0][-1]
        k = np.array(self.df.index).astype(float)
        energies = self.df.iloc[:,homo_idx].values
        energies *= self.hartree_to_ev
        return energies,k

    def get_lumo(self):
        df = self.df.copy()
        lumo_idx = np.where(self.mo_occ == 0)[0][0]
        k = np.array(self.df.index).astype(float)
        energies = self.df.iloc[:,lumo_idx].values
        energies *= self.hartree_to_ev
        return energies,k

    def savepickel(self):
        """
        Save the LAS Band Structure Data
        """
        nH = self.nH
        XC = self.XC
        homo_e, homo_k = self.get_homo()
        lumo_e, lumo_k = self.get_lumo()
        data = {'nH':nH,
                'XC':XC,
                'homo_e':homo_e,
                'homo_k':homo_k,
                'lumo_e':lumo_e,
                'lumo_k':lumo_k, 
                'bandgap': -lumo_e.min() + homo_e.max()
                }

        with open(f"hchain.{XC}.{nH}.pkl", "wb") as f:
            pickle.dump(data, f)

if __name__ == "__main__":
    for nH in [2,4, 8]:
        for XC in ['HSE06']:
            R = 1.4 # Distance between the H-atoms
            nkpts = int(32/nH)
            cell =  getCell(nH, XC, maxMem=350000, R=R)
            kmf = runDFT(cell, nH, nkpts, XC=XC)
            data = get_bands(cell, kmf, nH, nkpts, R=R)
            
            # Save the data
            PeriodicDataAnalysis(nH, XC, data).savepickel()
            
#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0553.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Wed Mar 19 01:38:38 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:/home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:/home/jangidbhavnesh/pdir/Apps/dmrgscf:/home/jangidbhavnesh/pdir/Apps/pyscf:/home/jangidbhavnesh/pdir/Apps/pyscf-forge:/home/jangidbhavnesh/pdir/Apps:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 2
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 H      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 H      1.400000000000   0.000000000000   0.000000000000 AA    2.645616574391   0.000000000000   0.000000000000 Bohr   0.0

nuclear repulsion = 13.1991070134428
number of shells = 2
number of NR pGTOs = 12
number of NR cGTOs = 2
basis = STO-6G
ecp = {}
CPU time:        21.60
lattice vectors  a1 [5.291233149, 0.000000000, 0.000000000]
                 a2 [0.000000000, 33.030522931, 0.000000000]
                 a3 [0.000000000, 0.000000000, 33.030522931]
dimension = 1
low_dim_ft_type = None
Cell volume = 5772.82
rcut = 24.293288226937268 (nimgs = [5 0 0])
lattice sum = 11 cells
precision = 1e-12
pseudo = None
ke_cutoff = 3527.180576457948
    = [143  60  60] mesh (514800 PWs)


******** <class 'pyscf.pbc.dft.krks.KRKS'> ********
method = KRKS
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-12
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = Hchain.HSE06.2.chk
max_memory 350000 MB (current use 157 MB)


******** PBC SCF flags ********
N kpts = 16
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7fbea95d3970>
XC functionals = HSE06
small_rho_cutoff = 1e-07
radial grids: 
    Treutler-Ahlrichs [JCP 102, 346 (1995); DOI:10.1063/1.469408] (M4) radial grids
    
becke partition: Becke, JCP 88, 2547 (1988); DOI:10.1063/1.454033
pruning grids: <function nwchem_prune at 0x7fbeb15df8b0>
grids dens level: 3
symmetrized grids: False
atomic radii adjust function: <function treutler_atomic_radii_adjust at 0x7fbeb15c0280>

WARN: df.j_only cannot be used with hybrid functional

Set gradient conv threshold to 1e-06


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [11 60 60] (39600 PWs)
ke_cutoff = 17.626088768626268
omega = 0.4860923768261129
exclude_d_aux = False
exclude_dd_block = False
j2c_eig_always = False
has_long_range = True
tot grids = 20332
cell vol = 5772.81709  sum(weights) = 3255.6311
nelec by numeric integration = 1.9999998608174012
<class 'pyscf.pbc.df.df.GDF'> does not have attributes  j_only


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = None
_cderi_to_save = /tmp/jobs/29239890/tmpl1tbpk3w
len(kpts) = 16
ETB for H: l = 0, exps = 0.200224856 * 2^n , n = 0..8

WARN: Even tempered Gaussians are generated as DF auxbasis for  H

Drop 0 primitive fitting functions
make aux basis, num shells = 18, num cGTOs = 18
auxcell.rcut 17.068110412336893


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [ 9 60 60] (32400 PWs)
ke_cutoff = 11.280696811920814
omega = 0.38887390146089035
exclude_d_aux = True
exclude_dd_block = False
j2c_eig_always = False
has_long_range = True
Create RSH-DF object <pyscf.pbc.df.df.GDF object at 0x7fbeb1d69a60> for omega=-0.11


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = None
_cderi_to_save = /tmp/jobs/29239890/tmpl1tbpk3w
len(kpts) = 16
ETB for H: l = 0, exps = 0.200224856 * 2^n , n = 0..8

WARN: Even tempered Gaussians are generated as DF auxbasis for  H

Drop 0 primitive fitting functions
make aux basis, num shells = 18, num cGTOs = 18
auxcell.rcut 17.068110412336893


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [ 5 60 60] (18000 PWs)
ke_cutoff = 0.8876302702084843
omega = 0.11
exclude_d_aux = True
exclude_dd_block = False
j2c_eig_always = False
has_long_range = True
