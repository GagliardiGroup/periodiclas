Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 00:25:26 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     4.800000000000   4.800000000000   4.800000000000 AA    9.070685397912   9.070685397912   9.070685397912 Bohr   0.0
[INPUT]  3 Ni     2.400000000000   2.400000000000   4.800000000000 AA    4.535342698956   4.535342698956   9.070685397912 Bohr   0.0
[INPUT]  4 Ni     7.200000000000   7.200000000000   9.600000000000 AA   13.606028096868  13.606028096868  18.141370795825 Bohr   0.0
[INPUT]  5 O      2.400000000000   2.400000000000   2.400000000000 AA    4.535342698956   4.535342698956   4.535342698956 Bohr   0.0
[INPUT]  6 O      7.200000000000   7.200000000000   7.200000000000 AA   13.606028096868  13.606028096868  13.606028096868 Bohr   0.0
[INPUT]  7 O      4.800000000000   4.800000000000   7.200000000000 AA    9.070685397912   9.070685397912  13.606028096868 Bohr   0.0
[INPUT]  8 O      9.600000000000   9.600000000000  12.000000000000 AA   18.141370795825  18.141370795825  22.676713494781 Bohr   0.0

nuclear repulsion = -415.830241503488
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:    207925.87
lattice vectors  a1 [9.070685398, 4.535342699, 4.535342699]
                 a2 [4.535342699, 9.070685398, 4.535342699]
                 a3 [9.070685398, 9.070685398, 18.141370796]
dimension = 3
low_dim_ft_type = None
Cell volume = 746.312
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [4 4 2])
lattice sum = 1973 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [199 199 397] mesh (15721597 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_2.400000000000001.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [13 13 25] (4225 PWs)
ke_cutoff = 5.7578556644179155
omega = 0.25398319279215964
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_2.400000000000001.chk
max_memory 500000 MB (current use 15964 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f457c2692e0>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_2.400000000000001.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -719.8116513013

WARN: HOMO 0.807230539996377 >= LUMO 0.807230539996388

cycle= 1 E= -705.531086279721  delta_E= 14.3  |g|= 11.1  |ddm|= 5.78
  HOMO = 0.566709353273983  LUMO = 0.593473331260959
cycle= 2 E= -679.607429657851  delta_E= 25.9  |g|= 12.7  |ddm|= 9.84
  HOMO = 0.533070724480271  LUMO = 0.568814667996303
cycle= 3 E= -714.293459843393  delta_E= -34.7  |g|= 5.94  |ddm|= 8.51
  HOMO = 0.790116615259158  LUMO = 0.808116063521782
cycle= 4 E= -676.338504786761  delta_E=   38  |g|= 12.2  |ddm|= 6.84
  HOMO = 0.384657548203205  LUMO = 0.398635258191656
cycle= 5 E= -720.619029136812  delta_E= -44.3  |g|= 3.23  |ddm|= 6.44
  HOMO = 0.373417397493503  LUMO = 0.394060316767982
cycle= 6 E= -718.891442101789  delta_E= 1.73  |g|= 4.41  |ddm|= 2.85
  HOMO = 0.391273983646283  LUMO = 0.415947243297137
cycle= 7 E= -719.238793663453  delta_E= -0.347  |g|= 4.12  |ddm|= 0.279
  HOMO = 0.394396203531141  LUMO = 0.40135130152061
cycle= 8 E= -721.88092249248  delta_E= -2.64  |g|= 1.72  |ddm|= 2.65
  HOMO = 0.390761295720637  LUMO = 0.408710634845103
cycle= 9 E= -722.797884822753  delta_E= -0.917  |g|= 1.12  |ddm|= 2.59
  HOMO = 0.367375341559872  LUMO = 0.51308377108923
cycle= 10 E= -723.046956419422  delta_E= -0.249  |g|= 0.867  |ddm|= 0.853
  HOMO = 0.359918976180505  LUMO = 0.539748110238244
cycle= 11 E= -723.126716938439  delta_E= -0.0798  |g|= 0.516  |ddm|= 0.26
  HOMO = 0.384650476056679  LUMO = 0.570554967114842
cycle= 12 E= -723.171164148247  delta_E= -0.0444  |g|= 0.145  |ddm|= 0.302
  HOMO = 0.379871005914365  LUMO = 0.572067840194317
cycle= 13 E= -723.174758762793  delta_E= -0.00359  |g|= 0.0331  |ddm|= 0.0851
  HOMO = 0.381181344695576  LUMO = 0.575079391258725
cycle= 14 E= -723.175031430112  delta_E= -0.000273  |g|= 0.00781  |ddm|= 0.0262
  HOMO = 0.381007654840816  LUMO = 0.575503172805057
cycle= 15 E= -723.175058401968  delta_E= -2.7e-05  |g|= 0.00438  |ddm|= 0.00718
  HOMO = 0.381053829052173  LUMO = 0.575614965257183
cycle= 16 E= -723.175085625633  delta_E= -2.72e-05  |g|= 0.00363  |ddm|= 0.00777
  HOMO = 0.381029214601356  LUMO = 0.575577065401288
cycle= 17 E= -723.175121496912  delta_E= -3.59e-05  |g|= 0.00343  |ddm|= 0.0108
  HOMO = 0.380998656630699  LUMO = 0.575600086299851
cycle= 18 E= -723.175228328794  delta_E= -0.000107  |g|= 0.00296  |ddm|= 0.0359
  HOMO = 0.380948551355726  LUMO = 0.576317657007689
cycle= 19 E= -723.175461644875  delta_E= -0.000233  |g|= 0.00247  |ddm|= 0.134
  HOMO = 0.380974560604315  LUMO = 0.57613656900864
cycle= 20 E= -723.175467256975  delta_E= -5.61e-06  |g|= 0.00191  |ddm|= 0.0063
  HOMO = 0.380957794982579  LUMO = 0.575871618336166
cycle= 21 E= -723.175483991708  delta_E= -1.67e-05  |g|= 0.00092  |ddm|= 0.036
  HOMO = 0.380979051257922  LUMO = 0.575611383274707
cycle= 22 E= -723.175485350127  delta_E= -1.36e-06  |g|= 0.000249  |ddm|= 0.00927
  HOMO = 0.38097318582698  LUMO = 0.575651261437407
cycle= 23 E= -723.175485448172  delta_E= -9.8e-08  |g|= 0.000171  |ddm|= 0.00245
  HOMO = 0.380974866940389  LUMO = 0.575631786388482
cycle= 24 E= -723.175485481342  delta_E= -3.32e-08  |g|= 0.00014  |ddm|= 0.000413
  HOMO = 0.380974009682295  LUMO = 0.575630459591114
cycle= 25 E= -723.175485513838  delta_E= -3.25e-08  |g|= 0.000137  |ddm|= 0.000272
  HOMO = 0.380973630115505  LUMO = 0.575632832697122
cycle= 26 E= -723.17548554783  delta_E= -3.4e-08  |g|= 0.000133  |ddm|= 0.000284
  HOMO = 0.380973398131418  LUMO = 0.575635317910487
cycle= 27 E= -723.175485774104  delta_E= -2.26e-07  |g|= 0.00011  |ddm|= 0.00263
  HOMO = 0.380976114902164  LUMO = 0.575634562810935
cycle= 28 E= -723.17548597946  delta_E= -2.05e-07  |g|= 7.7e-05  |ddm|= 0.00277
  HOMO = 0.38097322560792  LUMO = 0.575635412189698
cycle= 29 E= -723.1754860407  delta_E= -6.12e-08  |g|= 5.34e-05  |ddm|= 0.00256
  HOMO = 0.380975528711561  LUMO = 0.575632470997504
cycle= 30 E= -723.175486057998  delta_E= -1.73e-08  |g|= 3.7e-05  |ddm|= 0.00082
  HOMO = 0.380975490678019  LUMO = 0.575632065581675
cycle= 31 E= -723.175486071316  delta_E= -1.33e-08  |g|= 2.79e-05  |ddm|= 0.00053
  HOMO = 0.380975483353442  LUMO = 0.575631696140909
cycle= 32 E= -723.175486082789  delta_E= -1.15e-08  |g|= 2.08e-05  |ddm|= 0.000568
  HOMO = 0.380975102334238  LUMO = 0.575631870788181
cycle= 33 E= -723.175486090711  delta_E= -7.92e-09  |g|= 1.02e-05  |ddm|= 0.00069
  HOMO = 0.380975390563414  LUMO = 0.575632475482578
cycle= 34 E= -723.1754860921  delta_E= -1.39e-09  |g|= 5.9e-06  |ddm|= 0.00033
  HOMO = 0.38097526656838  LUMO = 0.575632554461362
cycle= 35 E= -723.175486092217  delta_E= -1.17e-10  |g|= 3.09e-06  |ddm|= 0.000103
  HOMO = 0.380975170525003  LUMO = 0.57563248261165
cycle= 36 E= -723.175486092217  delta_E=    0  |g|= 1.17e-06  |ddm|= 3.58e-05
  HOMO = 0.380975175939899  LUMO = 0.575632529163015
Extra cycle  E= -723.175486092217  delta_E= 2.27e-13  |g|= 1.44e-06  |ddm|= 1.8e-06
converged SCF energy = -723.175486092217


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.976342e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.015314e-05 ; sigma = 1.508333e-09 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.123258e-08 ; sigma = 3.552714e-14 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 2 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.976342e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 7.537602e-04 ; sigma = 3.673161e-02 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 1.165214e-05 ; sigma = 6.535933e-05 ; 1/2 fragment CI solvers converged
Cycle 3: max grad = 2.072712e-06 ; sigma = 2.022453e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.724339e-06 ; sigma = 4.632028e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.976340e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.400798e-03 ; sigma = 3.879404e-02 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 7.686281e-05 ; sigma = 2.142078e-03 ; 1/2 fragment CI solvers converged
Cycle 3: max grad = 1.352995e-06 ; sigma = 1.666129e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.216330e-06 ; sigma = 4.226308e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.976342e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 4.065325e-05 ; sigma = 6.932620e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.127840e-06 ; sigma = 2.646382e-08 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.039193e-07 ; sigma = 7.851497e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 3 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.976340e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 4.065339e-05 ; sigma = 6.932620e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.127845e-06 ; sigma = 2.646381e-08 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.039197e-07 ; sigma = 7.849366e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 3 cycles
LASCI state-average energy = -723.159797037349
LASCI state 0 energy = -723.393899987601
LASCI state 1 energy = -723.45393019062
LASCI state 2 energy = -723.453930172416
LASCI state 3 energy = -722.74861241384
LASCI state 4 energy = -722.748612422267
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -723.393899987601
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -723.45393019062
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -723.453930172416
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -722.74861241384
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -722.748612422267
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 482879.330304 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -723.3938999876   0.000      16      16      32       A
  1   -723.4539301906   0.750      16      15      31       A
  2   -723.4539301724   0.750      16      15      31       A
  3   -722.7486124138   0.750      17      16      33       A
  4   -722.7486124223   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 482829.563904 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 482829.563904 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -723.4539302478   0.750      16      15       A
  1   -723.4539301153   0.750      16      15       A
  2   -723.3938999876   0.000      16      16       A
  3   -722.7539830000   0.750      17      16       A
  4   -722.7432418361   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 482829.563904 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -741.4207013264787, Eot(tPBE) = -80.38898305954045


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -741.4206960283794, Eot(tPBE) = -80.3889862940233


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -741.3727206665131, Eot(tPBE) = -81.53296340729537


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -741.1719272281083, Eot(tPBE) = -82.581339772889


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [23 23 43] (22747 PWs)
ke_cutoff = 17.63343297227987
omega = 0.454706661094008
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -741.1638543355019, Eot(tPBE) = -82.58786454699371
