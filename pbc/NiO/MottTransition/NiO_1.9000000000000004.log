Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 00:09:53 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     3.800000000000   3.800000000000   3.800000000000 AA    7.180959273347   7.180959273347   7.180959273347 Bohr   0.0
[INPUT]  3 Ni     1.900000000000   1.900000000000   3.800000000000 AA    3.590479636674   3.590479636674   7.180959273347 Bohr   0.0
[INPUT]  4 Ni     5.700000000000   5.700000000000   7.600000000000 AA   10.771438910021  10.771438910021  14.361918546694 Bohr   0.0
[INPUT]  5 O      1.900000000000   1.900000000000   1.900000000000 AA    3.590479636674   3.590479636674   3.590479636674 Bohr   0.0
[INPUT]  6 O      5.700000000000   5.700000000000   5.700000000000 AA   10.771438910021  10.771438910021  10.771438910021 Bohr   0.0
[INPUT]  7 O      3.800000000000   3.800000000000   5.700000000000 AA    7.180959273347   7.180959273347  10.771438910021 Bohr   0.0
[INPUT]  8 O      7.600000000000   7.600000000000   9.500000000000 AA   14.361918546694  14.361918546694  17.952398183368 Bohr   0.0

nuclear repulsion = -525.259252425458
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:    118327.19
lattice vectors  a1 [7.180959273, 3.590479637, 3.590479637]
                 a2 [3.590479637, 7.180959273, 3.590479637]
                 a3 [7.180959273, 7.180959273, 14.361918547]
dimension = 3
low_dim_ft_type = None
Cell volume = 370.295
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [6 6 3])
lattice sum = 2627 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [159 159 315] mesh (7963515 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_1.9000000000000004.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [11 11 19] (2299 PWs)
ke_cutoff = 5.16771533316179
omega = 0.2414949499039251
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_1.9000000000000004.chk
max_memory 500000 MB (current use 9874 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f45601e5d60>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_1.9000000000000004.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -718.077739718084

WARN: HOMO 1.29391016096126 >= LUMO 1.29391016096929

cycle= 1 E= -706.762764249626  delta_E= 11.3  |g|= 10.2  |ddm|= 5.78
  HOMO = 1.11712614773008  LUMO = 1.12769308393201
cycle= 2 E= -692.2375524868  delta_E= 14.5  |g|= 12.7  |ddm|=  8.9
  HOMO = 0.989417871649331  LUMO = 1.0174574691431
cycle= 3 E= -719.064330731614  delta_E= -26.8  |g|= 1.91  |ddm|= 6.22
  HOMO = 0.988765730333649  LUMO = 1.01335690062853
cycle= 4 E= -719.61184348871  delta_E= -0.548  |g|= 1.06  |ddm|=  2.9
  HOMO = 0.942990406354173  LUMO = 1.02513530006734
cycle= 5 E= -719.779001539915  delta_E= -0.167  |g|= 0.521  |ddm|= 0.778
  HOMO = 0.92253345922304  LUMO = 1.04291865608263
cycle= 6 E= -719.812542366569  delta_E= -0.0335  |g|= 0.231  |ddm|= 0.283
  HOMO = 0.919739983828232  LUMO = 1.05356344713282
cycle= 7 E= -719.819304096549  delta_E= -0.00676  |g|= 0.0816  |ddm|= 0.146
  HOMO = 0.918109518845262  LUMO = 1.05139313789341
cycle= 8 E= -719.820291075598  delta_E= -0.000987  |g|= 0.0306  |ddm|= 0.0523
  HOMO = 0.917732781924008  LUMO = 1.04924363401735
cycle= 9 E= -719.820552527312  delta_E= -0.000261  |g|= 0.0138  |ddm|= 0.026
  HOMO = 0.918229060669144  LUMO = 1.04886918886532
cycle= 10 E= -719.820733356909  delta_E= -0.000181  |g|= 0.00944  |ddm|= 0.0218
  HOMO = 0.918028252267018  LUMO = 1.04878641741941
cycle= 11 E= -719.821086800973  delta_E= -0.000353  |g|= 0.00535  |ddm|= 0.0625
  HOMO = 0.917813464345323  LUMO = 1.04878019615678
cycle= 12 E= -719.821211909356  delta_E= -0.000125  |g|= 0.00275  |ddm|= 0.0476
  HOMO = 0.91772517164712  LUMO = 1.04862917938554
cycle= 13 E= -719.821228603824  delta_E= -1.67e-05  |g|= 0.00213  |ddm|= 0.0121
  HOMO = 0.917623623272163  LUMO = 1.04847897421419
cycle= 14 E= -719.821244719255  delta_E= -1.61e-05  |g|= 0.00146  |ddm|= 0.0121
  HOMO = 0.917609088606292  LUMO = 1.04852879615341
cycle= 15 E= -719.821253420761  delta_E= -8.7e-06  |g|= 0.000871  |ddm|= 0.0104
  HOMO = 0.917611329330479  LUMO = 1.04858852963543
cycle= 16 E= -719.821256456535  delta_E= -3.04e-06  |g|= 0.00039  |ddm|= 0.00887
  HOMO = 0.917613484585475  LUMO = 1.04860562496211
cycle= 17 E= -719.821256569569  delta_E= -1.13e-07  |g|= 0.00019  |ddm|= 0.00168
  HOMO = 0.917612211930587  LUMO = 1.04859610313207
cycle= 18 E= -719.821256575096  delta_E= -5.53e-09  |g|= 0.000113  |ddm|= 0.00026
  HOMO = 0.917611917277632  LUMO = 1.04859895230023
cycle= 19 E= -719.821256577512  delta_E= -2.42e-09  |g|= 2.31e-05  |ddm|= 0.000127
  HOMO = 0.917611711131293  LUMO = 1.04859730795414
cycle= 20 E= -719.821256578341  delta_E= -8.29e-10  |g|= 2.06e-05  |ddm|= 5.13e-05
  HOMO = 0.917612131877771  LUMO = 1.04859748506483
cycle= 21 E= -719.821256579356  delta_E= -1.02e-09  |g|= 1.83e-05  |ddm|= 6.63e-05
  HOMO = 0.91761167764212  LUMO = 1.04859717941996
cycle= 22 E= -719.82125658119  delta_E= -1.83e-09  |g|= 1.26e-05  |ddm|= 0.00016
  HOMO = 0.91761168127246  LUMO = 1.04859731910107
cycle= 23 E= -719.821256582447  delta_E= -1.26e-09  |g|= 5.56e-06  |ddm|= 0.000229
  HOMO = 0.917611817972966  LUMO = 1.04859738212894
cycle= 24 E= -719.821256582513  delta_E= -6.58e-11  |g|= 3.54e-06  |ddm|= 4.11e-05
  HOMO = 0.917611764186722  LUMO = 1.04859732182584
Extra cycle  E= -719.821256582528  delta_E= -1.46e-11  |g|= 3.22e-06  |ddm|= 6.44e-06
converged SCF energy = -719.821256582528


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.286019e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.368707e-03 ; sigma = 3.093836e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.219200e-05 ; sigma = 3.014923e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.032742e-06 ; sigma = 2.756284e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 3.714955e-08 ; sigma = 7.746692e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.144668e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.475197e-03 ; sigma = 7.325130e-05 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 9.462193e-05 ; sigma = 1.556222e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 5.424986e-06 ; sigma = 3.422087e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.397893e-06 ; sigma = 1.793504e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 6.660991e-07 ; sigma = 1.839240e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.134000e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 3.279881e-03 ; sigma = 5.855443e-03 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 1.280095e-03 ; sigma = 1.790659e-02 ; 1/2 fragment CI solvers converged
Cycle 3: max grad = 5.758192e-05 ; sigma = 1.145881e-04 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 2.197530e-06 ; sigma = 2.570246e-07 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.075248e-06 ; sigma = 7.321805e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 6.465095e-07 ; sigma = 1.656808e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.123349e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.084795e-03 ; sigma = 5.425531e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 7.056283e-05 ; sigma = 1.404876e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 5.187759e-06 ; sigma = 2.251088e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 2.021709e-07 ; sigma = 7.446443e-10 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.775424e-08 ; sigma = 2.549960e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.248810e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 3.582179e-03 ; sigma = 5.372447e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 3.741190e-04 ; sigma = 6.377472e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 4.295577e-05 ; sigma = 6.831198e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 4.633983e-06 ; sigma = 8.331735e-08 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 5.141085e-07 ; sigma = 9.982273e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 5.559708e-08 ; sigma = 1.202682e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
LASCI state-average energy = -718.634756369587
LASCI state 0 energy = -718.728931692992
LASCI state 1 energy = -719.566368176354
LASCI state 2 energy = -719.600515079159
LASCI state 3 energy = -717.651919789616
LASCI state 4 energy = -717.626047109815
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -718.728931692992
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -719.566368176354
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -719.600515079159
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -717.651919789616
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -717.626047109815
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 488928.753664 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -718.7289316930   0.000      16      16      32       A
  1   -719.5663681764   0.750      16      15      31       A
  2   -719.6005150792   0.750      16      15      31       A
  3   -717.6519197896   0.750      17      16      33       A
  4   -717.6260471098   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 488886.97856 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 488886.97856 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -719.6005150792   0.750      16      15       A
  1   -719.5663681763   0.750      16      15       A
  2   -718.7289316930   0.000      16      16       A
  3   -717.6519197896   0.750      17      16       A
  4   -717.6260471098   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 488886.97856 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -741.1439339106954, Eot(tPBE) = -82.51930451514507


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -741.1090775189379, Eot(tPBE) = -82.61530169143816


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -740.4110628077608, Eot(tPBE) = -83.55961080592678


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -739.6376002618612, Eot(tPBE) = -84.76131207524188


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 18.437897917083426
omega = 0.4645988078294528
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -739.629208834453, Eot(tPBE) = -84.85937025711172
