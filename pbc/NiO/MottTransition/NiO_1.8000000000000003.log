Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 00:05:07 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     3.600000000000   3.600000000000   3.600000000000 AA    6.803014048434   6.803014048434   6.803014048434 Bohr   0.0
[INPUT]  3 Ni     1.800000000000   1.800000000000   3.600000000000 AA    3.401507024217   3.401507024217   6.803014048434 Bohr   0.0
[INPUT]  4 Ni     5.400000000000   5.400000000000   7.200000000000 AA   10.204521072651  10.204521072651  13.606028096868 Bohr   0.0
[INPUT]  5 O      1.800000000000   1.800000000000   1.800000000000 AA    3.401507024217   3.401507024217   3.401507024217 Bohr   0.0
[INPUT]  6 O      5.400000000000   5.400000000000   5.400000000000 AA   10.204521072651  10.204521072651  10.204521072651 Bohr   0.0
[INPUT]  7 O      3.600000000000   3.600000000000   5.400000000000 AA    6.803014048434   6.803014048434  10.204521072651 Bohr   0.0
[INPUT]  8 O      7.200000000000   7.200000000000   9.000000000000 AA   13.606028096868  13.606028096868  17.007535121086 Bohr   0.0

nuclear repulsion = -554.440322004651
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:     90753.35
lattice vectors  a1 [6.803014048, 3.401507024, 3.401507024]
                 a2 [3.401507024, 6.803014048, 3.401507024]
                 a3 [6.803014048, 6.803014048, 13.606028097]
dimension = 3
low_dim_ft_type = None
Cell volume = 314.85
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [6 6 3])
lattice sum = 2709 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [151 151 299] mesh (6817499 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_1.8000000000000003.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [11 11 19] (2299 PWs)
ke_cutoff = 5.7578556644179155
omega = 0.25398319279215964
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_1.8000000000000003.chk
max_memory 500000 MB (current use 8614 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f471c1a3640>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_1.8000000000000003.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -718.050740710795
  HOMO = 1.45418870669888  LUMO = 1.48895291410536
cycle= 1 E= -709.328798848618  delta_E= 8.72  |g|=  9.2  |ddm|=  5.6
  HOMO = 1.22659398404714  LUMO = 1.23074143193766
cycle= 2 E= -696.81570583511  delta_E= 12.5  |g|= 11.9  |ddm|= 8.38
  HOMO = 1.14613253832497  LUMO = 1.18697563615587
cycle= 3 E= -718.022197140663  delta_E= -21.2  |g|=  1.9  |ddm|= 5.94
  HOMO = 1.16086729207254  LUMO = 1.16211086783256
cycle= 4 E= -718.512566075242  delta_E= -0.49  |g|= 0.525  |ddm|= 2.93
  HOMO = 1.14218217949001  LUMO = 1.17740196285846
cycle= 5 E= -718.552765869405  delta_E= -0.0402  |g|= 0.272  |ddm|= 0.298
  HOMO = 1.12998802552446  LUMO = 1.19971228987055
cycle= 6 E= -718.562067270028  delta_E= -0.0093  |g|= 0.0631  |ddm|= 0.209
  HOMO = 1.12769546059781  LUMO = 1.19509113716561
cycle= 7 E= -718.562772154341  delta_E= -0.000705  |g|= 0.0126  |ddm|= 0.0559
  HOMO = 1.12814345080172  LUMO = 1.19462474780356
cycle= 8 E= -718.562880019635  delta_E= -0.000108  |g|= 0.00706  |ddm|= 0.0176
  HOMO = 1.12795817263396  LUMO = 1.19451912054975
cycle= 9 E= -718.563036070272  delta_E= -0.000156  |g|= 0.00377  |ddm|= 0.0395
  HOMO = 1.127829056929  LUMO = 1.19443253791269
cycle= 10 E= -718.563091366162  delta_E= -5.53e-05  |g|= 0.00155  |ddm|= 0.0336
  HOMO = 1.12778534104327  LUMO = 1.19436532672743
cycle= 11 E= -718.56309832137  delta_E= -6.96e-06  |g|= 0.000989  |ddm|= 0.00816
  HOMO = 1.12775321943448  LUMO = 1.19440184928525
cycle= 12 E= -718.563101960217  delta_E= -3.64e-06  |g|= 0.000393  |ddm|= 0.00842
  HOMO = 1.12775930150622  LUMO = 1.19441748479419
cycle= 13 E= -718.563102129229  delta_E= -1.69e-07  |g|= 0.000249  |ddm|= 0.00164
  HOMO = 1.12776555896831  LUMO = 1.19443186765962
cycle= 14 E= -718.563102151753  delta_E= -2.25e-08  |g|= 2.13e-05  |ddm|= 0.000641
  HOMO = 1.1277663429017  LUMO = 1.19443103233626
cycle= 15 E= -718.563102151885  delta_E= -1.32e-10  |g|= 1.49e-05  |ddm|= 5.16e-05
  HOMO = 1.12776640493231  LUMO = 1.19443097685043
cycle= 16 E= -718.563102151917  delta_E= -3.15e-11  |g|= 2.99e-06  |ddm|= 9.9e-06
  HOMO = 1.12776661584673  LUMO = 1.19443090495055
Extra cycle  E= -718.563102151916  delta_E= 7.96e-13  |g|= 4.16e-06  |ddm|= 3.65e-06
converged SCF energy = -718.563102151916


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.935536e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 4.557777e-03 ; sigma = 7.280169e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.186727e-03 ; sigma = 2.787817e-03 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 7.552458e-05 ; sigma = 4.410787e-05 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.185363e-05 ; sigma = 4.503106e-07 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 7.646737e-07 ; sigma = 4.585464e-09 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 1.195999e-07 ; sigma = 4.637890e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.953296e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 3.448197e-03 ; sigma = 3.986970e-03 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 2.662668e-04 ; sigma = 3.644698e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 4.079291e-05 ; sigma = 3.272016e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.801492e-06 ; sigma = 5.874597e-08 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.502565e-06 ; sigma = 1.274106e-09 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 2.010194e-06 ; sigma = 4.716139e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.935535e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.230014e-03 ; sigma = 3.573547e-02 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 5.455012e-04 ; sigma = 4.234638e-03 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 3.002227e-05 ; sigma = 5.892199e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 4.991287e-06 ; sigma = 5.621075e-08 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.263889e-06 ; sigma = 6.333005e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 1.072359e-06 ; sigma = 2.604494e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.655750e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 3.809711e-03 ; sigma = 6.225523e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.319131e-04 ; sigma = 7.153834e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.064463e-04 ; sigma = 1.319574e-05 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 6.849776e-06 ; sigma = 3.768826e-07 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 3.193792e-06 ; sigma = 1.099300e-08 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 2.007876e-07 ; sigma = 3.211094e-10 ; 2/2 fragment CI solvers converged
Cycle 7: max grad = 9.344092e-08 ; sigma = 9.404921e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 7 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.697471e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 3.592562e-03 ; sigma = 5.178753e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 5.414794e-04 ; sigma = 7.777290e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 2.607751e-05 ; sigma = 1.049861e-05 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 9.686136e-06 ; sigma = 1.759662e-07 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 8.334632e-07 ; sigma = 3.866670e-09 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 2.491418e-07 ; sigma = 9.372414e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
LASCI state-average energy = -717.692872315899
LASCI state 0 energy = -717.793132947528
LASCI state 1 energy = -718.802708863315
LASCI state 2 energy = -718.835034259779
LASCI state 3 energy = -716.516791148424
LASCI state 4 energy = -716.516694360447
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -717.793132947528
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -718.802708863315
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -718.835034259779
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -716.516791148424
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -716.516694360447
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 490142.64832 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -717.7931329475   0.000      16      16      32       A
  1   -718.8027088633   0.750      16      15      31       A
  2   -718.8350342598   0.750      16      15      31       A
  3   -716.5167911484   0.750      17      16      33       A
  4   -716.5166943604   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 490136.25856 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 490136.250368 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -718.8350342598   0.750      16      15       A
  1   -718.8027088633   0.750      16      15       A
  2   -717.7931329475   0.000      16      16       A
  3   -716.5197288807   0.750      17      16       A
  4   -716.5137566282   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 490131.269632 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -741.3224682754746, Eot(tPBE) = -83.41679974239572


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -741.2911685537496, Eot(tPBE) = -83.35011482684315


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -740.442491652339, Eot(tPBE) = -84.46293281679827


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -739.5167518204859, Eot(tPBE) = -85.59152487522658


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 33] (9537 PWs)
ke_cutoff = 18.19766728507391
omega = 0.46166854975887034
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -739.512712855256, Eot(tPBE) = -85.594166305911
