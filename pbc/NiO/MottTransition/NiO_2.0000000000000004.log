Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 00:14:15 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     4.000000000000   4.000000000000   4.000000000000 AA    7.558904498260   7.558904498260   7.558904498260 Bohr   0.0
[INPUT]  3 Ni     2.000000000000   2.000000000000   4.000000000000 AA    3.779452249130   3.779452249130   7.558904498260 Bohr   0.0
[INPUT]  4 Ni     6.000000000000   6.000000000000   8.000000000000 AA   11.338356747390  11.338356747390  15.117808996520 Bohr   0.0
[INPUT]  5 O      2.000000000000   2.000000000000   2.000000000000 AA    3.779452249130   3.779452249130   3.779452249130 Bohr   0.0
[INPUT]  6 O      6.000000000000   6.000000000000   6.000000000000 AA   11.338356747390  11.338356747390  11.338356747390 Bohr   0.0
[INPUT]  7 O      4.000000000000   4.000000000000   6.000000000000 AA    7.558904498260   7.558904498260  11.338356747390 Bohr   0.0
[INPUT]  8 O      8.000000000000   8.000000000000  10.000000000000 AA   15.117808996520  15.117808996520  18.897261245651 Bohr   0.0

nuclear repulsion = -498.996289804185
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:    143791.15
lattice vectors  a1 [7.558904498, 3.779452249, 3.779452249]
                 a2 [3.779452249, 7.558904498, 3.779452249]
                 a3 [7.558904498, 7.558904498, 15.117808997]
dimension = 3
low_dim_ft_type = None
Cell volume = 431.893
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [5 5 3])
lattice sum = 2569 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [167 167 331] mesh (9231259 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_2.0000000000000004.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [11 11 21] (2541 PWs)
ke_cutoff = 5.757855664417913
omega = 0.25398319279215953
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_2.0000000000000004.chk
max_memory 500000 MB (current use 11142 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f457c4eb8e0>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_2.0000000000000004.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -718.290333952924

WARN: HOMO 1.16261927066473 >= LUMO 1.16261927066656

cycle= 1 E= -706.38937873922  delta_E= 11.9  |g|= 10.6  |ddm|= 5.68
  HOMO = 0.996929702082999  LUMO = 1.00292833137118
cycle= 2 E= -690.380437602799  delta_E=   16  |g|= 12.9  |ddm|=  8.9
  HOMO = 0.840616400789471  LUMO = 0.861076573970894
cycle= 3 E= -719.664884340118  delta_E= -29.3  |g|=  2.3  |ddm|= 6.33
  HOMO = 0.85962596881418  LUMO = 0.88902382013357
cycle= 4 E= -720.598301247014  delta_E= -0.933  |g|= 0.993  |ddm|= 2.88
  HOMO = 0.774274448477836  LUMO = 0.901302440007405
cycle= 5 E= -720.741207328809  delta_E= -0.143  |g|= 0.591  |ddm|= 0.846
  HOMO = 0.750533536532081  LUMO = 0.918627896684127
cycle= 6 E= -720.78751453704  delta_E= -0.0463  |g|= 0.27  |ddm|= 0.32
  HOMO = 0.749022815368789  LUMO = 0.931717456276126
cycle= 7 E= -720.798287272171  delta_E= -0.0108  |g|= 0.0645  |ddm|= 0.174
  HOMO = 0.746817365306575  LUMO = 0.927172959666782
cycle= 8 E= -720.799351493359  delta_E= -0.00106  |g|= 0.0261  |ddm|= 0.0532
  HOMO = 0.746955112764638  LUMO = 0.925977707104422
cycle= 9 E= -720.799681373246  delta_E= -0.00033  |g|= 0.021  |ddm|= 0.0276
  HOMO = 0.74736237262823  LUMO = 0.925420732498224
cycle= 10 E= -720.800017768363  delta_E= -0.000336  |g|= 0.014  |ddm|= 0.0265
  HOMO = 0.747095880971671  LUMO = 0.925319444623649
cycle= 11 E= -720.800789130203  delta_E= -0.000771  |g|= 0.0102  |ddm|= 0.0811
  HOMO = 0.746756819006465  LUMO = 0.92570841769812
cycle= 12 E= -720.801315572007  delta_E= -0.000526  |g|= 0.00507  |ddm|= 0.101
  HOMO = 0.746589064718003  LUMO = 0.925272258450914
cycle= 13 E= -720.801392790228  delta_E= -7.72e-05  |g|= 0.00364  |ddm|= 0.0316
  HOMO = 0.746391905107786  LUMO = 0.924771963998151
cycle= 14 E= -720.801439027721  delta_E= -4.62e-05  |g|= 0.00289  |ddm|= 0.0203
  HOMO = 0.746379941960318  LUMO = 0.924930179053632
cycle= 15 E= -720.80146105854  delta_E= -2.2e-05  |g|= 0.00238  |ddm|= 0.0104
  HOMO = 0.746324831141345  LUMO = 0.924942220428162
cycle= 16 E= -720.801499746658  delta_E= -3.87e-05  |g|= 0.00138  |ddm|= 0.0289
  HOMO = 0.746315132396114  LUMO = 0.925039520305144
cycle= 17 E= -720.801506239337  delta_E= -6.49e-06  |g|= 0.000494  |ddm|= 0.0149
  HOMO = 0.746302087510901  LUMO = 0.925028997623814
cycle= 18 E= -720.801506421565  delta_E= -1.82e-07  |g|= 0.000131  |ddm|= 0.00229
  HOMO = 0.746303878123293  LUMO = 0.925003481882739
cycle= 19 E= -720.801506434075  delta_E= -1.25e-08  |g|= 9.24e-05  |ddm|= 0.000297
  HOMO = 0.746304513284481  LUMO = 0.925003769818993
cycle= 20 E= -720.801506439784  delta_E= -5.71e-09  |g|= 6.78e-05  |ddm|= 0.000223
  HOMO = 0.746304220375032  LUMO = 0.92500376389723
cycle= 21 E= -720.80150644619  delta_E= -6.41e-09  |g|= 5.94e-05  |ddm|= 0.000136
  HOMO = 0.746303617120993  LUMO = 0.925006605325876
cycle= 22 E= -720.801506472263  delta_E= -2.61e-08  |g|= 3.84e-05  |ddm|= 0.000736
  HOMO = 0.746304753010369  LUMO = 0.925004670145327
cycle= 23 E= -720.801506477488  delta_E= -5.22e-09  |g|= 2.57e-05  |ddm|= 0.000321
  HOMO = 0.746304605997539  LUMO = 0.925004731274222
cycle= 24 E= -720.801506478917  delta_E= -1.43e-09  |g|= 1.83e-05  |ddm|= 0.000136
  HOMO = 0.746304403923743  LUMO = 0.925004526230479
cycle= 25 E= -720.8015064796  delta_E= -6.83e-10  |g|= 1.66e-05  |ddm|= 5.53e-05
  HOMO = 0.746304717619005  LUMO = 0.925004472035861
cycle= 26 E= -720.801506480833  delta_E= -1.23e-09  |g|= 1.41e-05  |ddm|= 0.000118
  HOMO = 0.746304886419769  LUMO = 0.925004474717908
cycle= 27 E= -720.801506481994  delta_E= -1.16e-09  |g|= 8.46e-06  |ddm|= 0.000179
  HOMO = 0.746304676917398  LUMO = 0.925004537911929
cycle= 28 E= -720.801506482201  delta_E= -2.07e-10  |g|= 6.28e-06  |ddm|= 7.64e-05
  HOMO = 0.746304673095512  LUMO = 0.925004445555332
cycle= 29 E= -720.801506482274  delta_E= -7.29e-11  |g|= 5.45e-06  |ddm|= 2.45e-05
  HOMO = 0.746304758755461  LUMO = 0.925004717332849
Extra cycle  E= -720.801506482309  delta_E= -3.48e-11  |g|= 5.41e-06  |ddm|= 8.88e-06
converged SCF energy = -720.801506482309


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.080421e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.647914e-03 ; sigma = 1.071284e-01 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.371102e-05 ; sigma = 1.223064e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 6.099555e-07 ; sigma = 2.141991e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.496597e-08 ; sigma = 2.779110e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.342121e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.854927e-03 ; sigma = 7.738936e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 7.036165e-05 ; sigma = 1.436396e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 5.530193e-06 ; sigma = 1.421326e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.073387e-06 ; sigma = 5.977032e-10 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 6.443397e-07 ; sigma = 1.174261e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.639166e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.998695e-03 ; sigma = 1.216685e-01 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 1.345529e-04 ; sigma = 4.989569e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 2.484769e-05 ; sigma = 1.857407e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 9.901833e-07 ; sigma = 7.743348e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 9.224836e-07 ; sigma = 3.422240e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.460467e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.472563e-03 ; sigma = 9.263165e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.919903e-04 ; sigma = 3.311951e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.375053e-05 ; sigma = 7.454443e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 2.529775e-06 ; sigma = 9.913267e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.814003e-07 ; sigma = 1.307647e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 3.333471e-08 ; sigma = 1.753264e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.214156e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.234653e-03 ; sigma = 6.525295e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 7.940737e-05 ; sigma = 9.233207e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 2.331963e-05 ; sigma = 8.632721e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 8.268499e-07 ; sigma = 8.838919e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 2.331788e-07 ; sigma = 8.885959e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
LASCI state-average energy = -719.733687529384
LASCI state 0 energy = -719.870212896799
LASCI state 1 energy = -720.454618365622
LASCI state 2 energy = -720.572082731204
LASCI state 3 energy = -718.907101733532
LASCI state 4 energy = -718.864421919761
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -719.870212896799
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -720.454618365622
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -720.572082731204
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -718.907101733532
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -718.864421919761
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 487707.8016 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -719.8702128968   0.000      16      16      32       A
  1   -720.4546183656   0.750      16      15      31       A
  2   -720.5720827312   0.750      16      15      31       A
  3   -718.9071017335   0.750      17      16      33       A
  4   -718.8644219198   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 487654.324224 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 487654.324224 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -720.5720828083   0.750      16      15       A
  1   -720.4546182885   0.750      16      15       A
  2   -719.8702128968   0.000      16      16       A
  3   -718.9097804385   0.750      17      16       A
  4   -718.8617432148   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 487654.324224 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -741.3012887874725, Eot(tPBE) = -82.13786235986079


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -741.2365996367927, Eot(tPBE) = -81.90236457044763


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -740.709301847698, Eot(tPBE) = -82.98563806994798


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -740.0792971080947, Eot(tPBE) = -84.06003421232113


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 35] (12635 PWs)
ke_cutoff = 16.6402028701678
omega = 0.44216613448534914
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -740.0015362479741, Eot(tPBE) = -84.09379577855891
