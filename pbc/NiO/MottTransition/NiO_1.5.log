Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Fri Mar 14 23:47:51 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     3.000000000000   3.000000000000   3.000000000000 AA    5.669178373695   5.669178373695   5.669178373695 Bohr   0.0
[INPUT]  3 Ni     1.500000000000   1.500000000000   3.000000000000 AA    2.834589186848   2.834589186848   5.669178373695 Bohr   0.0
[INPUT]  4 Ni     4.500000000000   4.500000000000   6.000000000000 AA    8.503767560543   8.503767560543  11.338356747390 Bohr   0.0
[INPUT]  5 O      1.500000000000   1.500000000000   1.500000000000 AA    2.834589186848   2.834589186848   2.834589186848 Bohr   0.0
[INPUT]  6 O      4.500000000000   4.500000000000   4.500000000000 AA    8.503767560543   8.503767560543   8.503767560543 Bohr   0.0
[INPUT]  7 O      3.000000000000   3.000000000000   4.500000000000 AA    5.669178373695   5.669178373695   8.503767560543 Bohr   0.0
[INPUT]  8 O      6.000000000000   6.000000000000   7.500000000000 AA   11.338356747390  11.338356747390  14.172945934238 Bohr   0.0

nuclear repulsion = -665.328386405581
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:        28.37
lattice vectors  a1 [5.669178374, 2.834589187, 2.834589187]
                 a2 [2.834589187, 5.669178374, 2.834589187]
                 a3 [5.669178374, 5.669178374, 11.338356747]
dimension = 3
low_dim_ft_type = None
Cell volume = 182.205
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [7 7 4])
lattice sum = 3483 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [125 125 249] mesh (3890625 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_1.5.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [ 9  9 15] (1215 PWs)
ke_cutoff = 5.015732045448498
omega = 0.23815806383734364
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_1.5.chk
max_memory 500000 MB (current use 2654 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f485f858b50>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_1.5.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -720.658175789322
  HOMO = 2.21523103173191  LUMO = 2.33799362077461
cycle= 1 E= -706.750445020899  delta_E= 13.9  |g|=  7.5  |ddm|= 7.55
  HOMO = 1.88156504909004  LUMO = 1.9004735132422
cycle= 2 E= -698.637941474793  delta_E= 8.11  |g|= 10.2  |ddm|= 9.97
  HOMO = 2.01278502774785  LUMO = 2.14859961647644
cycle= 3 E= -711.893438783088  delta_E= -13.3  |g|= 1.11  |ddm|= 7.31
  HOMO = 1.9812002943642  LUMO = 2.11634592218784
cycle= 4 E= -712.010083709126  delta_E= -0.117  |g|= 0.19  |ddm|= 0.686
  HOMO = 1.98070669293756  LUMO = 2.11913541981154
cycle= 5 E= -712.013969032634  delta_E= -0.00389  |g|= 0.0192  |ddm|= 0.15
  HOMO = 1.97945111193904  LUMO = 2.11779013031041
cycle= 6 E= -712.01402388741  delta_E= -5.49e-05  |g|= 0.00235  |ddm|= 0.0294
  HOMO = 1.97949679291104  LUMO = 2.11789486860665
cycle= 7 E= -712.014025746268  delta_E= -1.86e-06  |g|= 0.000652  |ddm|= 0.0041
  HOMO = 1.97948992906692  LUMO = 2.11790506468987
cycle= 8 E= -712.014026155809  delta_E= -4.1e-07  |g|= 0.000309  |ddm|= 0.00215
  HOMO = 1.97948287519183  LUMO = 2.11790616557386
cycle= 9 E= -712.014026113383  delta_E= 4.24e-08  |g|= 0.000987  |ddm|= 0.00147
  HOMO = 1.97947993057562  LUMO = 2.11790655691499
cycle= 10 E= -712.014026234062  delta_E= -1.21e-07  |g|= 3.35e-05  |ddm|= 0.00105
  HOMO = 1.97947940350309  LUMO = 2.117906776481
cycle= 11 E= -712.014026234762  delta_E= -7e-10  |g|= 7.81e-06  |ddm|= 0.000109
  HOMO = 1.9794795368845  LUMO = 2.11790697172659
cycle= 12 E= -712.014026234789  delta_E= -2.63e-11  |g|= 7.07e-06  |ddm|= 2.01e-05
  HOMO = 1.97947989285364  LUMO = 2.11790700528385
Extra cycle  E= -712.014026234756  delta_E= 3.21e-11  |g|= 1.85e-05  |ddm|= 1.72e-05
converged SCF energy = -712.014026234756


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.143618e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.549224e-03 ; sigma = 7.654682e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 4.060552e-04 ; sigma = 3.622859e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 2.111047e-05 ; sigma = 1.487296e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.486179e-06 ; sigma = 5.780826e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 7.978704e-08 ; sigma = 2.222578e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.113297e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 6.490928e-03 ; sigma = 1.276818e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 3.623872e-04 ; sigma = 3.184702e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 3.443798e-05 ; sigma = 2.167184e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 2.369267e-06 ; sigma = 1.651865e-08 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.081400e-06 ; sigma = 1.086633e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 7.456027e-07 ; sigma = 1.550404e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.936009e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 3.202025e-03 ; sigma = 4.693985e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 3.210871e-04 ; sigma = 1.347305e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 3.428365e-05 ; sigma = 1.527069e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 3.850566e-06 ; sigma = 1.718779e-08 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.183248e-06 ; sigma = 1.942269e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 1.122151e-06 ; sigma = 1.091394e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.174933e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 8.193400e-03 ; sigma = 1.155285e-01 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 5.397297e-04 ; sigma = 1.913104e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 5.468862e-05 ; sigma = 2.069423e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 3.722435e-06 ; sigma = 1.844311e-08 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 4.235806e-07 ; sigma = 1.575344e-10 ; 2/2 fragment CI solvers converged
Cycle 6: max grad = 3.249244e-08 ; sigma = 1.371347e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 6 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.263136e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.907083e-03 ; sigma = 6.986114e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.040119e-04 ; sigma = 6.769786e-06 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 9.161782e-06 ; sigma = 1.314799e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 7.532734e-07 ; sigma = 7.334293e-10 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 3.405880e-08 ; sigma = 3.190337e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
LASCI state-average energy = -708.923693446493
LASCI state 0 energy = -708.997357699443
LASCI state 1 energy = -710.809942375998
LASCI state 2 energy = -710.952229860819
LASCI state 3 energy = -706.977137438291
LASCI state 4 energy = -706.881799857913
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -708.997357699443
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -710.809942375998
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -710.952229860819
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -706.977137438291
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -706.881799857913
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 494671.763456 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -708.9973576994   0.000      16      16      32       A
  1   -710.8099423760   0.750      16      15      31       A
  2   -710.9522298608   0.750      16      15      31       A
  3   -706.9771374383   0.750      17      16      33       A
  4   -706.8817998579   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 494645.106688 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 494645.106688 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -710.9971679385   0.750      16      15       A
  1   -710.7650042983   0.750      16      15       A
  2   -708.9973576994   0.000      16      16       A
  3   -706.9771374392   0.750      17      16       A
  4   -706.8817998570   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 494645.106688 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -737.1843979142517, Eot(tPBE) = -86.89632377481466


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -736.9973552102424, Eot(tPBE) = -86.93902145043954


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -735.4259048045614, Eot(tPBE) = -88.11201207416796


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -733.6649135169622, Eot(tPBE) = -89.33426456907073


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [15 15 27] (6075 PWs)
ke_cutoff = 17.299157462873392
omega = 0.45052780161449535
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -733.5276676698987, Eot(tPBE) = -89.29190160065113
