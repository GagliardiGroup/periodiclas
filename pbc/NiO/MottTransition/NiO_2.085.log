Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    nd = 2.085
    cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
    kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

    #molden.from_mo(cell, f'NiO_{nU}.molden', kmf.mo_coeff)
    las = runLASSCF(cell, kmf)
    las = processlas(las)

    lsi,energies_lassi = runLASSI(las)
    IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
    energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
    IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
    
    savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

    print("Results: LASSI ", )
    print("Ionization Energy: ", IP_LASSI)
    print("ElectAtt   Energy: ", EA_LASSI)
    print("Band Gap: ", IP_LASSI-EA_LASSI)

    print("Results: PDFT", )
    print("Ionization Energy: ", IP_PDFT)
    print("ElectAtt   Energy: ", EA_PDFT)
    print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Fri Mar 14 23:06:20 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     4.170000000000   4.170000000000   4.170000000000 AA    7.880157939436   7.880157939436   7.880157939436 Bohr   0.0
[INPUT]  3 Ni     2.085000000000   2.085000000000   4.170000000000 AA    3.940078969718   3.940078969718   7.880157939436 Bohr   0.0
[INPUT]  4 Ni     6.255000000000   6.255000000000   8.340000000000 AA   11.820236909154  11.820236909154  15.760315878873 Bohr   0.0
[INPUT]  5 O      2.085000000000   2.085000000000   2.085000000000 AA    3.940078969718   3.940078969718   3.940078969718 Bohr   0.0
[INPUT]  6 O      6.255000000000   6.255000000000   6.255000000000 AA   11.820236909154  11.820236909154  11.820236909154 Bohr   0.0
[INPUT]  7 O      4.170000000000   4.170000000000   6.255000000000 AA    7.880157939436   7.880157939436  11.820236909154 Bohr   0.0
[INPUT]  8 O      8.340000000000   8.340000000000  10.425000000000 AA   15.760315878873  15.760315878873  19.700394848591 Bohr   0.0

nuclear repulsion = -478.653515399698
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:        25.64
lattice vectors  a1 [7.880157939, 3.940078970, 3.940078970]
                 a2 [3.940078970, 7.880157939, 3.940078970]
                 a3 [7.880157939, 7.880157939, 15.760315879]
dimension = 3
low_dim_ft_type = None
Cell volume = 489.333
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [5 5 3])
lattice sum = 2225 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [173 173 345] mesh (10325505 PWs)


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_2.085.chk
max_memory 500000 MB (current use 153 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f2fc4eb5910>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_2.085.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 17.165389279564792
omega = 0.44884386251453634
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -718.558159586613

WARN: HOMO 1.06758494761126 >= LUMO 1.0675849476296

cycle= 1 E= -705.900082105852  delta_E= 12.7  |g|= 10.8  |ddm|= 5.73
  HOMO = 0.914063453408873  LUMO = 0.929907010093783
cycle= 2 E= -688.62722026766  delta_E= 17.3  |g|= 12.9  |ddm|= 9.05
  HOMO = 0.751614002522752  LUMO = 0.755603780158123
cycle= 3 E= -718.9252011131  delta_E= -30.3  |g|= 3.57  |ddm|= 6.52
  HOMO = 0.909061186736442  LUMO = 0.915616949273399
cycle= 4 E= -705.994777421073  delta_E= 12.9  |g|= 8.78  |ddm|= 5.08
  HOMO = 0.679534175804093  LUMO = 0.761961448724383
cycle= 5 E= -720.754089086456  delta_E= -14.8  |g|= 1.42  |ddm|= 4.45
  HOMO = 0.659939211746671  LUMO = 0.778226479207359
cycle= 6 E= -721.016887101528  delta_E= -0.263  |g|= 1.43  |ddm|= 2.08
  HOMO = 0.619048168786268  LUMO = 0.835158820699061
cycle= 7 E= -721.402375192815  delta_E= -0.385  |g|= 0.608  |ddm|= 0.952
  HOMO = 0.606277025559577  LUMO = 0.891119910291487
cycle= 8 E= -721.445024563529  delta_E= -0.0426  |g|= 0.357  |ddm|= 0.249
  HOMO = 0.592421185373016  LUMO = 0.902641666243717
cycle= 9 E= -721.46055296845  delta_E= -0.0155  |g|= 0.145  |ddm|= 0.157
  HOMO = 0.594466380069489  LUMO = 0.901973758070136
cycle= 10 E= -721.464561062242  delta_E= -0.00401  |g|= 0.0255  |ddm|= 0.0876
  HOMO = 0.593822147974358  LUMO = 0.90196593141398
cycle= 11 E= -721.465052415682  delta_E= -0.000491  |g|= 0.0147  |ddm|= 0.0347
  HOMO = 0.593416252691137  LUMO = 0.902146205553323
cycle= 12 E= -721.465472699657  delta_E= -0.00042  |g|= 0.0129  |ddm|= 0.0359
  HOMO = 0.592487564926987  LUMO = 0.902224026297476
cycle= 13 E= -721.466391539339  delta_E= -0.000919  |g|= 0.00879  |ddm|= 0.103
  HOMO = 0.591497374419066  LUMO = 0.90256861455478
cycle= 14 E= -721.466948856975  delta_E= -0.000557  |g|= 0.00475  |ddm|= 0.121
  HOMO = 0.591221663614771  LUMO = 0.901989525510661
cycle= 15 E= -721.467009496421  delta_E= -6.06e-05  |g|= 0.00347  |ddm|= 0.0238
  HOMO = 0.591066470893545  LUMO = 0.901900278478885
cycle= 16 E= -721.467054998455  delta_E= -4.55e-05  |g|= 0.00283  |ddm|= 0.0221
  HOMO = 0.591023659194501  LUMO = 0.90179035708143
cycle= 17 E= -721.467077547833  delta_E= -2.25e-05  |g|= 0.00278  |ddm|= 0.012
  HOMO = 0.591101583008774  LUMO = 0.901869844701798
cycle= 18 E= -721.467106350228  delta_E= -2.88e-05  |g|= 0.00175  |ddm|= 0.0192
  HOMO = 0.591157987508554  LUMO = 0.902026796277213
cycle= 19 E= -721.467121148717  delta_E= -1.48e-05  |g|= 0.000452  |ddm|= 0.0245
  HOMO = 0.591141151974666  LUMO = 0.901942570018812
cycle= 20 E= -721.467121349552  delta_E= -2.01e-07  |g|= 0.000174  |ddm|= 0.0023
  HOMO = 0.59113996505062  LUMO = 0.901928531777187
cycle= 21 E= -721.467121370687  delta_E= -2.11e-08  |g|= 0.000105  |ddm|= 0.000291
  HOMO = 0.591141315371098  LUMO = 0.901930688471397
cycle= 22 E= -721.467121383738  delta_E= -1.31e-08  |g|= 8.82e-05  |ddm|= 0.000178
  HOMO = 0.591142430915898  LUMO = 0.901929677426374
cycle= 23 E= -721.467121397937  delta_E= -1.42e-08  |g|= 8e-05  |ddm|= 0.000202
  HOMO = 0.591152285592213  LUMO = 0.901931591261842
cycle= 24 E= -721.467121448879  delta_E= -5.09e-08  |g|= 4.63e-05  |ddm|= 0.001
  HOMO = 0.591156226678515  LUMO = 0.901927281984252
cycle= 25 E= -721.467121463489  delta_E= -1.46e-08  |g|= 2.93e-05  |ddm|= 0.000697
  HOMO = 0.59115787857374  LUMO = 0.90192793449805
cycle= 26 E= -721.467121465143  delta_E= -1.65e-09  |g|= 1.73e-05  |ddm|= 0.000202
  HOMO = 0.591158017582363  LUMO = 0.901927736269912
cycle= 27 E= -721.467121465404  delta_E= -2.62e-10  |g|= 1.45e-05  |ddm|= 3.94e-05
  HOMO = 0.591157802536079  LUMO = 0.901927682645493
cycle= 28 E= -721.467121466054  delta_E= -6.49e-10  |g|= 1.21e-05  |ddm|= 6.25e-05
  HOMO = 0.591156937036873  LUMO = 0.901926908483807
cycle= 29 E= -721.467121466751  delta_E= -6.97e-10  |g|= 9.62e-06  |ddm|= 8.88e-05
  HOMO = 0.591156584127005  LUMO = 0.901927482586244
cycle= 30 E= -721.467121467162  delta_E= -4.11e-10  |g|= 4.55e-06  |ddm|= 9.67e-05
  HOMO = 0.591156299917837  LUMO = 0.901927082687975
cycle= 31 E= -721.467121467217  delta_E= -5.54e-11  |g|= 3.63e-06  |ddm|= 2.83e-05
  HOMO = 0.591156370606211  LUMO = 0.901927424725306
Extra cycle  E= -721.467121467227  delta_E= -1.01e-11  |g|= 4.22e-06  |ddm|= 5.87e-06
converged SCF energy = -721.467121467227


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 17.165389279564792
omega = 0.44884386251453634
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 17.165389279564792
omega = 0.44884386251453634
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 17.165389279564792
omega = 0.44884386251453634
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.213803e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 7.303129e-04 ; sigma = 4.300176e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.140682e-05 ; sigma = 1.430214e-06 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.504126e-07 ; sigma = 1.328894e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 4.278995e-09 ; sigma = 5.897505e-13 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.204901e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.304521e-03 ; sigma = 9.745788e-02 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 1.132526e-03 ; sigma = 4.960829e-04 ; 1/2 fragment CI solvers converged
Cycle 3: max grad = 6.768123e-04 ; sigma = 8.943256e-06 ; 1/2 fragment CI solvers converged
Cycle 4: max grad = 1.247601e-03 ; sigma = 6.456773e-05 ; 1/2 fragment CI solvers converged
Cycle 5: max grad = 1.224968e-03 ; sigma = 1.871817e-06 ; 1/2 fragment CI solvers converged
Cycle 6: max grad = 1.037939e-03 ; sigma = 2.065584e-05 ; 1/2 fragment CI solvers converged
Cycle 7: max grad = 1.031781e-03 ; sigma = 2.299252e-08 ; 1/2 fragment CI solvers converged
Cycle 8: max grad = 1.036182e-03 ; sigma = 6.126517e-08 ; 1/2 fragment CI solvers converged
