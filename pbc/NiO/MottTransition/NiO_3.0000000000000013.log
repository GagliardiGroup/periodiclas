Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 01:07:56 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     6.000000000000   6.000000000000   6.000000000000 AA   11.338356747390  11.338356747390  11.338356747390 Bohr   0.0
[INPUT]  3 Ni     3.000000000000   3.000000000000   6.000000000000 AA    5.669178373695   5.669178373695  11.338356747390 Bohr   0.0
[INPUT]  4 Ni     9.000000000000   9.000000000000  12.000000000000 AA   17.007535121086  17.007535121086  22.676713494781 Bohr   0.0
[INPUT]  5 O      3.000000000000   3.000000000000   3.000000000000 AA    5.669178373695   5.669178373695   5.669178373695 Bohr   0.0
[INPUT]  6 O      9.000000000000   9.000000000000   9.000000000000 AA   17.007535121086  17.007535121086  17.007535121086 Bohr   0.0
[INPUT]  7 O      6.000000000000   6.000000000000   9.000000000000 AA   11.338356747390  11.338356747390  17.007535121086 Bohr   0.0
[INPUT]  8 O     12.000000000000  12.000000000000  15.000000000000 AA   22.676713494781  22.676713494781  28.345891868476 Bohr   0.0

nuclear repulsion = -332.66419320279
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:    448167.72
lattice vectors  a1 [11.338356747, 5.669178374, 5.669178374]
                 a2 [5.669178374, 11.338356747, 5.669178374]
                 a3 [11.338356747, 11.338356747, 22.676713495]
dimension = 3
low_dim_ft_type = None
Cell volume = 1457.64
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [4 4 2])
lattice sum = 1543 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [249 249 497] mesh (30814497 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_3.0000000000000013.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [15 15 29] (6525 PWs)
ke_cutoff = 5.015732045448494
omega = 0.23815806383734356
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_3.0000000000000013.chk
max_memory 500000 MB (current use 23362 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f457c29abb0>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_3.0000000000000013.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -722.053574198016

WARN: HOMO 0.578781008970121 >= LUMO 0.579352921446762

cycle= 1 E= -713.131167740715  delta_E= 8.92  |g|= 9.28  |ddm|= 4.86
  HOMO = 0.373893352056764  LUMO = 0.384935774342645
cycle= 2 E= -682.07709621985  delta_E= 31.1  |g|= 11.8  |ddm|=  9.9
  HOMO = 0.299804700408524  LUMO = 0.385225686380748
cycle= 3 E= -720.744342655697  delta_E= -38.7  |g|= 4.65  |ddm|= 8.94
  HOMO = 0.172982253519891  LUMO = 0.399450059423259
cycle= 4 E= -724.336584968667  delta_E= -3.59  |g|= 2.01  |ddm|= 2.58
  HOMO = 0.108506170281841  LUMO = 0.317732461960616
cycle= 5 E= -724.635215320206  delta_E= -0.299  |g|= 1.02  |ddm|= 0.867
  HOMO = 0.179831781247607  LUMO = 0.273501659818484
cycle= 6 E= -724.857008688595  delta_E= -0.222  |g|= 0.202  |ddm|= 0.599
  HOMO = 0.196227045046578  LUMO = 0.267070708107521
cycle= 7 E= -724.865318234747  delta_E= -0.00831  |g|= 0.0118  |ddm|= 0.145
  HOMO = 0.196502855146229  LUMO = 0.267876106238762
cycle= 8 E= -724.865383755213  delta_E= -6.55e-05  |g|= 0.00687  |ddm|= 0.0173
  HOMO = 0.196422872010292  LUMO = 0.26797455305816
cycle= 9 E= -724.865427409309  delta_E= -4.37e-05  |g|= 0.00488  |ddm|= 0.0113
  HOMO = 0.196569909782674  LUMO = 0.267993395398659
cycle= 10 E= -724.865463780829  delta_E= -3.64e-05  |g|= 0.00482  |ddm|= 0.00807
  HOMO = 0.196585236064238  LUMO = 0.267997189445327
cycle= 11 E= -724.865397568798  delta_E= 6.62e-05  |g|= 0.00472  |ddm|= 0.0146
  HOMO = 0.197260930405845  LUMO = 0.273583497329388
cycle= 12 E= -724.864186326785  delta_E= 0.00121  |g|= 0.0111  |ddm|= 0.38
  HOMO = 0.197261292048276  LUMO = 0.273366489823017
cycle= 13 E= -724.864174416995  delta_E= 1.19e-05  |g|= 0.0108  |ddm|= 0.00838
  HOMO = 0.197213255166844  LUMO = 0.270123356436895
cycle= 14 E= -724.864086447472  delta_E= 8.8e-05  |g|= 0.00408  |ddm|= 0.0847
  HOMO = 0.197361518150968  LUMO = 0.27119024594568
cycle= 15 E= -724.864016025439  delta_E= 7.04e-05  |g|= 0.00633  |ddm|= 0.131
  HOMO = 0.197313586567798  LUMO = 0.269660958645502
cycle= 16 E= -724.864024008545  delta_E= -7.98e-06  |g|= 0.00317  |ddm|= 0.0155
  HOMO = 0.197233714296174  LUMO = 0.267669308123819
cycle= 17 E= -724.864025255279  delta_E= -1.25e-06  |g|= 0.000978  |ddm|= 0.0139
  HOMO = 0.197252864526347  LUMO = 0.268041262435671
cycle= 18 E= -724.864025455019  delta_E= -2e-07  |g|= 0.00021  |ddm|= 0.00125
  HOMO = 0.197256573249585  LUMO = 0.268156323218875
cycle= 19 E= -724.864025465379  delta_E= -1.04e-08  |g|= 2.04e-05  |ddm|= 0.000376
  HOMO = 0.19725772789273  LUMO = 0.268150258832347
cycle= 20 E= -724.864025465331  delta_E= 4.77e-11  |g|= 1.07e-05  |ddm|= 0.000145
  HOMO = 0.197257743416823  LUMO = 0.268145284299229
cycle= 21 E= -724.864025465359  delta_E= -2.85e-11  |g|= 2.17e-06  |ddm|= 1.45e-05
  HOMO = 0.197257753882808  LUMO = 0.268145344480656
Extra cycle  E= -724.864025465359  delta_E= -1.14e-13  |g|= 2.95e-06  |ddm|= 3.89e-06
converged SCF energy = -724.864025465359


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.434640e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.578124e-07 ; sigma = 3.537082e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 1 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.434640e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.069211e-04 ; sigma = 4.341142e-02 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 1.490039e-04 ; sigma = 4.019893e-05 ; 1/2 fragment CI solvers converged
Cycle 3: max grad = 4.593436e-04 ; sigma = 1.950945e-04 ; 1/2 fragment CI solvers converged
Cycle 4: max grad = 4.607957e-04 ; sigma = 2.073964e-04 ; 1/2 fragment CI solvers converged
Cycle 5: max grad = 1.267560e-04 ; sigma = 9.471358e-05 ; 1/2 fragment CI solvers converged
Cycle 6: max grad = 1.217492e-04 ; sigma = 6.944056e-04 ; 1/2 fragment CI solvers converged
Cycle 7: max grad = 2.855807e-05 ; sigma = 3.310750e-05 ; 1/2 fragment CI solvers converged
Cycle 8: max grad = 8.361630e-06 ; sigma = 2.383441e-06 ; 1/2 fragment CI solvers converged
Cycle 9: max grad = 2.559317e-06 ; sigma = 5.512653e-07 ; 1/2 fragment CI solvers converged
Cycle 10: max grad = 1.531791e-06 ; sigma = 1.505074e-08 ; 2/2 fragment CI solvers converged
Cycle 11: max grad = 1.181025e-06 ; sigma = 2.917488e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 11 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.434593e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.070143e-04 ; sigma = 4.341050e-02 ; 1/2 fragment CI solvers converged
Cycle 2: max grad = 1.543163e-04 ; sigma = 3.963653e-05 ; 1/2 fragment CI solvers converged
Cycle 3: max grad = 5.261651e-04 ; sigma = 2.250617e-04 ; 1/2 fragment CI solvers converged
Cycle 4: max grad = 3.774247e-04 ; sigma = 1.583743e-04 ; 1/2 fragment CI solvers converged
Cycle 5: max grad = 1.282143e-04 ; sigma = 8.134558e-05 ; 1/2 fragment CI solvers converged
Cycle 6: max grad = 1.956710e-04 ; sigma = 5.277951e-04 ; 1/2 fragment CI solvers converged
Cycle 7: max grad = 1.287038e-04 ; sigma = 1.574176e-04 ; 1/2 fragment CI solvers converged
Cycle 8: max grad = 2.451991e-05 ; sigma = 7.660289e-05 ; 1/2 fragment CI solvers converged
Cycle 9: max grad = 9.435453e-06 ; sigma = 2.419428e-06 ; 1/2 fragment CI solvers converged
Cycle 10: max grad = 2.898372e-06 ; sigma = 1.439419e-07 ; 1/2 fragment CI solvers converged
Cycle 11: max grad = 7.941630e-07 ; sigma = 3.503116e-08 ; 2/2 fragment CI solvers converged
Cycle 12: max grad = 4.305274e-07 ; sigma = 7.830181e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 12 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.434640e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 6.410617e-04 ; sigma = 5.855461e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.498990e-06 ; sigma = 5.283328e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 3.702699e-08 ; sigma = 3.096972e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.424350e-10 ; sigma = 1.421085e-13 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 3.434593e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 6.410770e-04 ; sigma = 5.855461e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.499011e-06 ; sigma = 5.283537e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 3.702805e-08 ; sigma = 3.097085e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.424551e-10 ; sigma = 1.705303e-13 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
LASCI state-average energy = -724.963965913157
LASCI state 0 energy = -725.234342787229
LASCI state 1 energy = -724.893094584065
LASCI state 2 energy = -724.893094627393
LASCI state 3 energy = -724.899648792604
LASCI state 4 energy = -724.899648774494
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -725.234342787229
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -724.893094584065
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -724.893094627393
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -724.899648792604
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -724.899648774494
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 475488.155648 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -725.2343427872   0.000      16      16      32       A
  1   -724.8930945841   0.750      16      15      31       A
  2   -724.8930946274   0.750      16      15      31       A
  3   -724.8996487926   0.750      17      16      33       A
  4   -724.8996487745   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 475472.058368 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 475472.058368 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -725.2343427872   0.000      16      16       A
  1   -724.8996488805   0.750      17      16       A
  2   -724.8996486866   0.750      17      16       A
  3   -724.8932476611   0.750      16      15       A
  4   -724.8929415504   0.750      16      15       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 475472.058368 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -740.5296345382053, Eot(tPBE) = -81.13147436915797


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -740.5371824174034, Eot(tPBE) = -82.10586000069043


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -740.5371823422416, Eot(tPBE) = -82.1058602558059


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -740.1685039772051, Eot(tPBE) = -79.94091917392709


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [27 27 53] (38637 PWs)
ke_cutoff = 17.29915746287338
omega = 0.45052780161449524
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -740.1682517379411, Eot(tPBE) = -79.94113395059391
