Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 00:17:26 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     4.200000000000   4.200000000000   4.200000000000 AA    7.936849723173   7.936849723173   7.936849723173 Bohr   0.0
[INPUT]  3 Ni     2.100000000000   2.100000000000   4.200000000000 AA    3.968424861587   3.968424861587   7.936849723173 Bohr   0.0
[INPUT]  4 Ni     6.300000000000   6.300000000000   8.400000000000 AA   11.905274584760  11.905274584760  15.873699446347 Bohr   0.0
[INPUT]  5 O      2.100000000000   2.100000000000   2.100000000000 AA    3.968424861587   3.968424861587   3.968424861587 Bohr   0.0
[INPUT]  6 O      6.300000000000   6.300000000000   6.300000000000 AA   11.905274584760  11.905274584760  11.905274584760 Bohr   0.0
[INPUT]  7 O      4.200000000000   4.200000000000   6.300000000000 AA    7.936849723173   7.936849723173  11.905274584760 Bohr   0.0
[INPUT]  8 O      8.400000000000   8.400000000000  10.500000000000 AA   15.873699446347  15.873699446347  19.842124307933 Bohr   0.0

nuclear repulsion = -475.234561718272
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:    161860.57
lattice vectors  a1 [7.936849723, 3.968424862, 3.968424862]
                 a2 [3.968424862, 7.936849723, 3.968424862]
                 a3 [7.936849723, 7.936849723, 15.873699446]
dimension = 3
low_dim_ft_type = None
Cell volume = 499.971
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [5 5 3])
lattice sum = 2209 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [175 175 349] mesh (10688125 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_2.1000000000000005.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [11 11 21] (2541 PWs)
ke_cutoff = 5.222544820333711
omega = 0.24268599924032294
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_2.1000000000000005.chk
max_memory 500000 MB (current use 12345 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f457c3ac6a0>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_2.1000000000000005.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -718.610954651754

WARN: HOMO 1.05141714958692 >= LUMO 1.05141714959837

cycle= 1 E= -705.853099231758  delta_E= 12.8  |g|= 10.9  |ddm|= 5.72
  HOMO = 0.900419601001412  LUMO = 0.90417822764922
cycle= 2 E= -688.312239513617  delta_E= 17.5  |g|=   13  |ddm|= 9.06
  HOMO = 0.733443770830144  LUMO = 0.740687417518651
cycle= 3 E= -718.07313825542  delta_E= -29.8  |g|= 4.17  |ddm|= 6.55
  HOMO = 0.984794725383014  LUMO = 0.98833110696498
cycle= 4 E= -698.983509963412  delta_E= 19.1  |g|=   11  |ddm|= 5.72
  HOMO = 0.655432938506902  LUMO = 0.728013203147773
cycle= 5 E= -717.798652132105  delta_E= -18.8  |g|= 4.55  |ddm|= 4.28
  HOMO = 0.695600247377444  LUMO = 0.719117202036334
cycle= 6 E= -721.117140390008  delta_E= -3.32  |g|= 1.05  |ddm|= 2.56
  HOMO = 0.614940049064667  LUMO = 0.80276512610963
cycle= 7 E= -721.466054179519  delta_E= -0.349  |g|= 0.72  |ddm|= 1.58
  HOMO = 0.591700636407089  LUMO = 0.846820802018589
cycle= 8 E= -721.544894380433  delta_E= -0.0788  |g|= 0.393  |ddm|= 0.489
  HOMO = 0.583022911193425  LUMO = 0.882821717004571
cycle= 9 E= -721.567172184782  delta_E= -0.0223  |g|= 0.167  |ddm|= 0.216
  HOMO = 0.57655593130136  LUMO = 0.882575300973928
cycle= 10 E= -721.570445838962  delta_E= -0.00327  |g|= 0.0696  |ddm|= 0.0909
  HOMO = 0.578695045571584  LUMO = 0.883195216706433
cycle= 11 E= -721.571585385735  delta_E= -0.00114  |g|= 0.0355  |ddm|= 0.0546
  HOMO = 0.57807992799832  LUMO = 0.882880804475378
cycle= 12 E= -721.572015217837  delta_E= -0.00043  |g|= 0.0193  |ddm|= 0.0281
  HOMO = 0.577830739370136  LUMO = 0.884454979289055
cycle= 13 E= -721.572516064182  delta_E= -0.000501  |g|= 0.013  |ddm|= 0.0417
  HOMO = 0.57733384754304  LUMO = 0.88480697599264
cycle= 14 E= -721.572866352919  delta_E= -0.00035  |g|= 0.0113  |ddm|= 0.0344
  HOMO = 0.576219164669805  LUMO = 0.884665299546207
cycle= 15 E= -721.573754407304  delta_E= -0.000888  |g|= 0.00639  |ddm|= 0.123
  HOMO = 0.575594949231377  LUMO = 0.884826538350197
cycle= 16 E= -721.574052497556  delta_E= -0.000298  |g|= 0.00388  |ddm|= 0.0878
  HOMO = 0.575477186499345  LUMO = 0.884643563272176
cycle= 17 E= -721.57408896372  delta_E= -3.65e-05  |g|= 0.00315  |ddm|= 0.0192
  HOMO = 0.575351038152063  LUMO = 0.884413256387295
cycle= 18 E= -721.57411075939  delta_E= -2.18e-05  |g|= 0.00279  |ddm|= 0.0116
  HOMO = 0.575287169911372  LUMO = 0.884287055565266
cycle= 19 E= -721.57413416981  delta_E= -2.34e-05  |g|= 0.00219  |ddm|= 0.0137
  HOMO = 0.575349777467259  LUMO = 0.884444074093839
cycle= 20 E= -721.574153793618  delta_E= -1.96e-05  |g|= 0.00145  |ddm|= 0.0142
  HOMO = 0.575413948707654  LUMO = 0.884560879793318
cycle= 21 E= -721.574168489937  delta_E= -1.47e-05  |g|= 0.0011  |ddm|= 0.0216
  HOMO = 0.575393796555865  LUMO = 0.884432841390303
cycle= 22 E= -721.574169372874  delta_E= -8.83e-07  |g|= 0.000184  |ddm|= 0.00513
  HOMO = 0.575406080482836  LUMO = 0.884443769225663
cycle= 23 E= -721.574169410619  delta_E= -3.77e-08  |g|= 0.000138  |ddm|= 0.000688
  HOMO = 0.575410025688312  LUMO = 0.884437643959387
cycle= 24 E= -721.574169420575  delta_E= -9.96e-09  |g|= 8.79e-05  |ddm|= 0.000434
  HOMO = 0.575410462317064  LUMO = 0.884442299510038
cycle= 25 E= -721.574169434821  delta_E= -1.42e-08  |g|= 7.74e-05  |ddm|= 0.000263
  HOMO = 0.575412544904765  LUMO = 0.88443925569244
cycle= 26 E= -721.574169449176  delta_E= -1.44e-08  |g|= 7.15e-05  |ddm|= 0.000229
  HOMO = 0.575414212309946  LUMO = 0.884436116661768
cycle= 27 E= -721.574169489691  delta_E= -4.05e-08  |g|= 4.56e-05  |ddm|= 0.00105
  HOMO = 0.575415926889668  LUMO = 0.884437434986883
cycle= 28 E= -721.57416949642  delta_E= -6.73e-09  |g|= 3.01e-05  |ddm|= 0.000467
  HOMO = 0.575417309262944  LUMO = 0.884436635118165
cycle= 29 E= -721.574169498719  delta_E= -2.3e-09  |g|= 2.19e-05  |ddm|= 0.000168
  HOMO = 0.575418471053452  LUMO = 0.884436317886149
cycle= 30 E= -721.574169500268  delta_E= -1.55e-09  |g|= 1.55e-05  |ddm|= 0.000141
  HOMO = 0.575419616969708  LUMO = 0.884436145556725
cycle= 31 E= -721.574169501367  delta_E= -1.1e-09  |g|= 1.11e-05  |ddm|= 0.000126
  HOMO = 0.575420806529926  LUMO = 0.884436630735743
cycle= 32 E= -721.574169501779  delta_E= -4.12e-10  |g|= 7.53e-06  |ddm|= 8.49e-05
  HOMO = 0.575420989500555  LUMO = 0.884436448486422
cycle= 33 E= -721.574169501929  delta_E= -1.5e-10  |g|= 6.34e-06  |ddm|= 2.96e-05
  HOMO = 0.5754212648178  LUMO = 0.884436392794707
cycle= 34 E= -721.574169502091  delta_E= -1.62e-10  |g|= 5.24e-06  |ddm|= 4.7e-05
  HOMO = 0.575421251807118  LUMO = 0.884436772894407
cycle= 35 E= -721.574169502222  delta_E= -1.3e-10  |g|= 4.34e-06  |ddm|= 4e-05
  HOMO = 0.575421318191374  LUMO = 0.884436479547737
cycle= 36 E= -721.574169502284  delta_E= -6.24e-11  |g|= 2.18e-06  |ddm|= 4.89e-05
  HOMO = 0.575421231154474  LUMO = 0.884436607081698
Extra cycle  E= -721.574169502287  delta_E= -2.5e-12  |g|= 2.72e-06  |ddm|= 3.38e-06
converged SCF energy = -721.574169502287


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.329464e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 7.001066e-04 ; sigma = 3.823796e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 9.458928e-06 ; sigma = 1.166055e-06 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.341922e-07 ; sigma = 1.075197e-09 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 3.162149e-09 ; sigma = 3.623768e-13 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.200049e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.949561e-03 ; sigma = 1.468825e-01 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 8.646209e-05 ; sigma = 6.938471e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 3.489078e-06 ; sigma = 3.487423e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 6.646021e-07 ; sigma = 1.817178e-10 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 5.299358e-07 ; sigma = 1.392664e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.299951e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 1.730711e-03 ; sigma = 1.714885e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.590684e-05 ; sigma = 2.181513e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 1.300716e-06 ; sigma = 1.142975e-08 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 8.948601e-07 ; sigma = 1.502620e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 4 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.213261e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 7.868819e-04 ; sigma = 7.851178e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 4.281162e-05 ; sigma = 2.132169e-05 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 2.145421e-06 ; sigma = 4.565403e-08 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 1.686199e-07 ; sigma = 1.524345e-10 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 7.937114e-09 ; sigma = 5.329071e-13 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 1.377659e-01 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 5.248623e-03 ; sigma = 2.337569e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.550443e-04 ; sigma = 5.080205e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 2.376521e-05 ; sigma = 2.189669e-06 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 6.276687e-07 ; sigma = 9.076945e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 9.664716e-08 ; sigma = 3.687362e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
LASCI state-average energy = -720.778854859849
LASCI state 0 energy = -720.907382597139
LASCI state 1 energy = -721.480733729434
LASCI state 2 energy = -721.399401721873
LASCI state 3 energy = -720.052261111985
LASCI state 4 energy = -720.054495138813
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -720.907382597139
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -721.480733729434
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -721.399401721873
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -720.052261111985
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -720.054495138813
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 486496.6144 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -720.9073825971   0.000      16      16      32       A
  1   -721.4807337294   0.750      16      15      31       A
  2   -721.3994017219   0.750      16      15      31       A
  3   -720.0522611120   0.750      17      16      33       A
  4   -720.0544951388   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 486445.934592 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 486445.934592 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -721.4807337294   0.750      16      15       A
  1   -721.3994017219   0.750      16      15       A
  2   -720.9073825971   0.000      16      16       A
  3   -720.0545039197   0.750      17      16       A
  4   -720.0522523311   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 486445.934592 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -741.4074500270862, Eot(tPBE) = -81.77696179745776


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -741.3579574297067, Eot(tPBE) = -81.65879695966008


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -740.9722186673877, Eot(tPBE) = -82.49684134448762


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -740.3749855327, Eot(tPBE) = -83.56709363481842


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [19 19 37] (13357 PWs)
ke_cutoff = 16.921045217881225
omega = 0.44575035560518955
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -740.3895803115948, Eot(tPBE) = -83.56921905970229
