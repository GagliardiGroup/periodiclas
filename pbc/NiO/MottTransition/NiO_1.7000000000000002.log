Discarded 16 diffused primitive functions, 0 contracted functions
#INFO: **** input file is /project/lgagliardi/jangidbhavnesh/Re/Final/MottTransition/NewGeometry/NiO.py ****
import os, sys
import shutil
import numpy as np
import scipy.linalg as la
from pyscf.pbc import scf, gto, df, dft, tools
from pyscf.tools import molden
from pyscf import mcpdft, lib, mcscf
from pyscf.mcscf import avas,project_init_guess
from pyscf import mcscf, dmrgscf
from functools import reduce
from pyscf import __config__
from pyscf.pbc.tools import k2gamma
# Import mcpdft from mrh
from mrh.my_pyscf import mcpdft
from pyscf.tools import molden
pre_orth_method = getattr(__config__, 'pbc_scf_analyze_pre_orth_method', 'ANO')

def getCell(nd=2.085, spin=0, maxMem=200000, basis='def2SVP', pseudo=None):
    cell = gto.Cell()
    cell.a = [[2*nd, nd, nd], [nd, 2*nd, nd], [2*nd, 2*nd, 4*nd]]
    cell.atom= f'''
Ni 0 0 0
Ni {2*nd} {2*nd} {2*nd}
Ni {nd} {nd} {2*nd}
Ni {3*nd} {3*nd} {4*nd}
O {nd} {nd} {nd}
O {3*nd} {3*nd} {3*nd}
O {2*nd} {2*nd} {3*nd}
O {4*nd} {4*nd} {5*nd}
    '''
    cell.basis = basis
    cell.pseudo = pseudo
    cell.output=f'NiO_{nd}.log'
    cell.verbose=lib.logger.INFO
    cell.precision=1e-12
    cell.exp_to_discard=0.1
    cell.spin=0
    cell.max_memory = maxMem
    cell.build()
    return cell

def get_gdf(cell, filename, restart=True):
    if not os.path.exists(filename) or restart:
        gdf = df.GDF(cell)
        gdf._cderi_to_save = filename
        gdf.build()
    return filename

def initguess(mol, mf, ao_label: list, activespacesize:int):
    '''
    Based on the ao_label find the orb which has
    highest character of that ao
    '''
    from pyscf.lo import orth
    baslst = mol.search_ao_label(ao_label)
    assert len(baslst) >=activespacesize
    orbindex=[]
    if len(mf.mo_coeff) > 1:
        mo_coeff = mf.mo_coeff[0]
    else:
        mo_coeff = mf.mo_coeff
    
    nkpts, nao = 1, mf.mo_coeff.shape[1]
    s_sc = mf.get_ovlp()
    orth_coeff = orth.orth_ao(mol, 'meta_lowdin',pre_orth_ao=None, s=s_sc)
    C = reduce(np.dot,(orth_coeff.T.conj(), s_sc, mf.mo_coeff))
    for orb in baslst:
        ao = C[orb]
        A = np.argsort(ao*ao.conj())[-activespacesize:][::-1]
        for element in A:
            if element not in orbindex:
                orbindex.append(element)
                break
    orbind = [x+1 for x in orbindex]
    return sorted(orbind[:activespacesize])

def runSCF(cell,nd=2.085, Restricted=True, Unrestricted=False):
    '''
    Run the Hartree Fock
    '''
    if Restricted:
        kmf = scf.ROHF(cell).density_fit()
    elif Unrestricted:
        kmf = scf.UHF(cell).density_fit()
    else:
        raise NotImplementedError

    kmf.max_cycle=100
    kmf.chkfile = f'NiO_{nd}.chk'
    kmf.init_guess='chk'
    kmf.with_df._cderi = get_gdf(cell, kmf.chkfile.rstrip('.chk')+'.h5', restart=False)
    kmf.exxdiv = None
    kmf.conv_tol = 1e-10
    kmf.kernel()

    if not kmf.converged:
        kmf.newton().run()

    assert kmf, "mean-field didn't converge"
    return kmf

def getfrags(nfrags: int):
    '''
    If NiO is in POSCAR Format where first N-atoms are Ni and
    next N-atoms are O, then get the frag atom no
    '''
    assert nfrags>=1, "You should know what you are doing"
    frags = []
    offset = nfrags * 2
    for i in range(nfrags):
        frag = [i * 2, i * 2 + offset, i * 2 + 1, i * 2 + offset + 1]
        frags.append(frag)
    return frags

def runLASSCF(cell, kmf):
    nfrags = 2
    ncas = 10 
    nelec = 16
    norb  = tuple([ncas,]*nfrags)
    nele  = tuple([nelec,]*nfrags)
    nspin = tuple([1,]*nfrags)

    orblst = initguess(cell, kmf, ao_label=['Ni 3d', ], activespacesize=sum(norb))

    frags = getfrags(nfrags)
    from mrh.my_pyscf.mcscf.lasscf_o0 import LASSCF
    las = LASSCF(kmf, norb, nele, spin_sub=nspin)
    sortedmo = las.sort_mo(orblst, kmf.mo_coeff)
    mo0 = las.localize_init_guess(frags, sortedmo)
    #mo0 = sortedmo
    molden.from_mo(cell, f'NiO.{nfrags}.las.molden', mo0[:, las.ncore:las.ncore+(ncas*nfrags)])
    las_weights,las_charges,las_spins,las_smults=genModelSpace(nfrags)
    las = las.state_average(las_weights,las_charges,las_spins,las_smults)
    elasci = las.lasci_(mo0)
    las.mo_coeff = mo0
    return las

# Model Space for the band gap
def genModelSpace(nfrags):
    las_charges = []
    las_spins = [] #2s
    las_smults = [] #2s+1

    las_charges += [[0]*nfrags]
    las_spins += [[0]*nfrags]
    las_smults += [[las_spins[0][0]+1]*nfrags]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    for i in range(nfrags):
        idxarr = np.eye(nfrags)[:,i].astype(int)
        las_charges += [list(-idxarr)]
        spins = idxarr
        las_spins += [list(spins)]
        las_smults += [list(spins + 1)]

    nrootspaces = len(las_charges)
    las_weights = np.ones(nrootspaces)/nrootspaces
    return las_weights,las_charges,las_spins,las_smults

def processlas(las):
    from periodiclas.tools import sign_control, util
    las.ci = sign_control.fix_sign(las)
    las.dump_spaces()
    return las

def runLASSI(las):
    from mrh.my_pyscf.lassi import lassi
    lsi = lassi.LASSI(las)
    energies_lassi, civecs_lassi = lsi.kernel()
    return lsi, energies_lassi

def runLASSIPDFT(lsi, states=[0]):
    from mrh.my_pyscf import mcpdft
    mc = mcpdft.LASSI(lsi, 'tPBE', states=states)
    energies = mc.kernel()[0]
    return energies

def getBANDGAP(nele, lsi, energies_lassi):
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [list(x) for x in stateidx]
    ip = 27.21139*(min(energies_lassi[stateidx[1]]) - min(energies_lassi[stateidx[0]]))
    ea = 27.21139*(min(energies_lassi[stateidx[0]]) - min(energies_lassi[stateidx[2]]))
    return ip, ea

def getNatorbOcc(nele, lsi):
    from mrh.my_pyscf.lassi.lassi import root_make_rdm12s
    stateidx = [
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele - 1))[0],
        np.where((np.asarray(lsi.rootsym)[:, :2].sum(axis=1) == nele + 1))[0]]
    stateidx = [int(list(x)[0]) for x in stateidx]
    for state in stateidx:
        natorb_casdm1 = root_make_rdm12s (lsi, lsi.ci, lsi.si, state=state, opt=lsi.opt)[0].sum (0)
        mo_occ = lsi._las.canonicalize (natorb_casdm1=natorb_casdm1)[2]
        mo_occ = [x for x in mo_occ if 0 < x < 2]
        print("State-",state, mo_occ)

def savepickel(mf, lsi, pdftenergy=0, R=2.47):
    """
    Save the LAS Band Structure Data
    """

    from periodiclas.tools import sign_control, util
    civec = lsi.get_sivec_vacuum_shuffle(state=0)
    charges = util.las_charges(lsi._las)

    data = {"energies_lassi":lsi.e_roots,
            "energies_lassipdft":pdftenergy,
            "civecs":civec,
            "charges":charges,
            "dist":R,
            "mf_coeff":mf.mo_coeff,
            "mf_occ":mf.mo_occ,
            "mf_ene":mf.mo_energy}


if __name__ == "__main__":
    for nd in np.arange(1.5, 3.6, 0.1):
        cell =  getCell(nd, maxMem=500000, basis='gth-dzvp-molopt-sr', pseudo='gth-pade')
        kmf = runSCF(cell, nd, Restricted=True, Unrestricted=False)

        las = runLASSCF(cell, kmf)
        las = processlas(las)

        lsi,energies_lassi = runLASSI(las)
        IP_LASSI, EA_LASSI = getBANDGAP(32, lsi,energies_lassi)
        energies_mcpdft = runLASSIPDFT(lsi, states=[x for x in range(len(energies_lassi))])
        IP_PDFT, EA_PDFT = getBANDGAP(32, lsi,np.asarray(energies_mcpdft))
        
        savepickel(kmf, lsi, pdftenergy=energies_mcpdft, R=nd)

        print("Results: LASSI ", )
        print("Ionization Energy: ", IP_LASSI)
        print("ElectAtt   Energy: ", EA_LASSI)
        print("Band Gap: ", IP_LASSI-EA_LASSI)

        print("Results: PDFT", )
        print("Ionization Energy: ", IP_PDFT)
        print("ElectAtt   Energy: ", EA_PDFT)
        print("Band Gap: ", IP_PDFT-EA_PDFT)

#INFO: ******************** input file end ********************


System: uname_result(system='Linux', node='midway3-0555.rcc.local', release='4.18.0-305.3.1.el8.x86_64', version='#1 SMP Tue Jun 1 16:14:33 UTC 2021', machine='x86_64')  Threads 128
Python 3.9.13 (main, Aug 25 2022, 23:26:10) 
[GCC 11.2.0]
numpy 1.26.2  scipy 1.11.4  h5py 3.10.0
Date: Sat Mar 15 00:00:35 2025
PySCF version 2.8.0
PySCF path  /home/jangidbhavnesh/bin/pyscf
GIT ORIG_HEAD a0665c4a7bf54e33f01295b3eea390be7a17d76d
GIT HEAD (branch master) 6f6d3741bf42543e02ccaa1d4ef43d9bf83b3dda
mrh path  /home/jangidbhavnesh/bin/mrh
GIT ORIG_HEAD ed1f605b415d72e71fb56d97b9d163809b62b172
GIT HEAD (branch master) ea89791c15c26abd3b0f0efdeadd7a286ca4585a

[ENV] PYSCF_EXT_PATH /home/jangidbhavnesh/bin/pyscf:/home/jangidbhavnesh/bin/pyscf-forge:/home/jangidbhavnesh/bin/dmrgscf:/home/jangidbhavnesh/bin:
[CONFIG] conf_file /home/jangidbhavnesh/.pyscf_conf.py
[INPUT] verbose = 4
[INPUT] num. atoms = 8
[INPUT] num. electrons = 96
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry False subgroup None
[INPUT] Mole.unit = angstrom
[INPUT] Symbol           X                Y                Z      unit          X                Y                Z       unit  Magmom
[INPUT]  1 Ni     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr   0.0
[INPUT]  2 Ni     3.400000000000   3.400000000000   3.400000000000 AA    6.425068823521   6.425068823521   6.425068823521 Bohr   0.0
[INPUT]  3 Ni     1.700000000000   1.700000000000   3.400000000000 AA    3.212534411761   3.212534411761   6.425068823521 Bohr   0.0
[INPUT]  4 Ni     5.100000000000   5.100000000000   6.800000000000 AA    9.637603235282   9.637603235282  12.850137647042 Bohr   0.0
[INPUT]  5 O      1.700000000000   1.700000000000   1.700000000000 AA    3.212534411761   3.212534411761   3.212534411761 Bohr   0.0
[INPUT]  6 O      5.100000000000   5.100000000000   5.100000000000 AA    9.637603235282   9.637603235282   9.637603235282 Bohr   0.0
[INPUT]  7 O      3.400000000000   3.400000000000   5.100000000000 AA    6.425068823521   6.425068823521   9.637603235282 Bohr   0.0
[INPUT]  8 O      6.800000000000   6.800000000000   8.500000000000 AA   12.850137647042  12.850137647042  16.062672058803 Bohr   0.0

nuclear repulsion = -587.054458593159
number of shells = 28
number of NR pGTOs = 500
number of NR cGTOs = 156
basis = gth-dzvp-molopt-sr
ecp = {}
CPU time:     66061.61
lattice vectors  a1 [6.425068824, 3.212534412, 3.212534412]
                 a2 [3.212534412, 6.425068824, 3.212534412]
                 a3 [6.425068824, 6.425068824, 12.850137647]
dimension = 3
low_dim_ft_type = None
Cell volume = 265.237
exp_to_discard = 0.1
rcut = 21.840927745318478 (nimgs = [6 6 3])
lattice sum = 2771 cells
precision = 1e-12
pseudo = gth-pade
ke_cutoff = 1563.543132532536
    = [143 143 283] mesh (5787067 PWs)


******** <class 'pyscf.pbc.df.df.GDF'> ********
auxbasis = None
exp_to_discard = 0.1
_cderi_to_save = NiO_1.7000000000000002.h5
len(kpts) = 1
ETB for O: l = 0, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 1, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 2, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 3, exps = 0.32498323008 * 2^n , n = 0..6
ETB for O: l = 4, exps = 0.32498323008 * 2^n , n = 0..6
ETB for Ni: l = 0, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 1, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 2, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 3, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 4, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 5, exps = 0.689956484316 * 2^n , n = 0..4
ETB for Ni: l = 6, exps = 0.689956484316 * 2^n , n = 0..4

WARN: Even tempered Gaussians are generated as DF auxbasis for  O Ni

Drop 0 primitive fitting functions
make aux basis, num shells = 280, num cGTOs = 1680
auxcell.rcut 14.405988831603228


******** <class 'pyscf.pbc.df.rsdf_builder._RSGDFBuilder'> ********
mesh = [ 9  9 17] (1377 PWs)
ke_cutoff = 5.100384256370196
omega = 0.24002314978663045
exclude_d_aux = True
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.scf.rohf.ROHF'> ********
method = ROHF
initial guess = chk
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
diis_damp = 0
SCF conv_tol = 1e-10
SCF conv_tol_grad = None
SCF max_cycles = 100
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = NiO_1.7000000000000002.chk
max_memory 500000 MB (current use 6972 MB)
******** PBC SCF flags ********
kpt = [0. 0. 0.]
Exchange divergence treatment (exxdiv) = None
DF object = <pyscf.pbc.df.df.GDF object at 0x7f456071d910>
number of electrons per cell  alpha = 48 beta = 48
Set gradient conv threshold to 1e-05

WARN: Fail in reading NiO_1.7000000000000002.chk. Use MINAO initial guess



******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
init E= -718.330388805476
  HOMO = 1.65230804088541  LUMO = 1.7089193888434
cycle= 1 E= -709.13341982705  delta_E=  9.2  |g|=  8.7  |ddm|= 5.98
  HOMO = 1.39523586385797  LUMO = 1.41168354515673
cycle= 2 E= -697.776483747721  delta_E= 11.4  |g|= 11.6  |ddm|= 8.61
  HOMO = 1.37194882965937  LUMO = 1.43787548715134
cycle= 3 E= -716.680776324417  delta_E= -18.9  |g|= 1.59  |ddm|=  6.1
  HOMO = 1.34083835813799  LUMO = 1.40781576605653
cycle= 4 E= -716.966201474502  delta_E= -0.285  |g|= 0.187  |ddm|= 0.765
  HOMO = 1.34183218735394  LUMO = 1.3980412733489
cycle= 5 E= -716.96934877189  delta_E= -0.00315  |g|= 0.0831  |ddm|= 0.138
  HOMO = 1.34450674528717  LUMO = 1.40038098558717
cycle= 6 E= -716.970398807103  delta_E= -0.00105  |g|= 0.0057  |ddm|= 0.059
  HOMO = 1.34459410537572  LUMO = 1.40030596505818
cycle= 7 E= -716.97042405849  delta_E= -2.53e-05  |g|= 0.00249  |ddm|= 0.0115
  HOMO = 1.34457474805464  LUMO = 1.40025866632359
cycle= 8 E= -716.970431126702  delta_E= -7.07e-06  |g|= 0.000525  |ddm|= 0.00849
  HOMO = 1.34451909967086  LUMO = 1.40023581549903
cycle= 9 E= -716.970431426534  delta_E= -3e-07  |g|= 0.000336  |ddm|= 0.002
  HOMO = 1.34451774490499  LUMO = 1.40023534792994
cycle= 10 E= -716.970431382935  delta_E= 4.36e-08  |g|= 0.0007  |ddm|= 0.00087
  HOMO = 1.3445150319062  LUMO = 1.40023411094237
cycle= 11 E= -716.970431461783  delta_E= -7.88e-08  |g|= 8.04e-05  |ddm|= 0.000659
  HOMO = 1.34451638824485  LUMO = 1.40023238259904
cycle= 12 E= -716.970431477536  delta_E= -1.58e-08  |g|= 2.66e-05  |ddm|= 0.000558
  HOMO = 1.34451630626729  LUMO = 1.4002321809536
cycle= 13 E= -716.970431477636  delta_E= -1e-10  |g|= 6.2e-05  |ddm|= 9.66e-05
  HOMO = 1.34451630658661  LUMO = 1.40023208737578
cycle= 14 E= -716.97043147816  delta_E= -5.25e-10  |g|= 2.62e-06  |ddm|= 4.99e-05
  HOMO = 1.34451610174337  LUMO = 1.40023188922858
cycle= 15 E= -716.970431478162  delta_E= -1.48e-12  |g|= 1.1e-06  |ddm|= 3.65e-06
  HOMO = 1.34451618318544  LUMO = 1.4002319741416
Extra cycle  E= -716.970431478161  delta_E= 5.68e-13  |g|= 1.88e-06  |ddm|= 1.71e-06
converged SCF energy = -716.970431478161


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 2.746459e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 4.053359e-04 ; sigma = 4.146747e-09 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.294926e-05 ; sigma = 2.922107e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 2 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 6.193158e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.758647e-03 ; sigma = 8.640786e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.022721e-04 ; sigma = 1.791785e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 8.960054e-06 ; sigma = 4.934645e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 2.388853e-06 ; sigma = 1.444842e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.851833e-06 ; sigma = 2.862954e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 6.193155e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.758649e-03 ; sigma = 8.640788e-02 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 2.022729e-04 ; sigma = 1.791788e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 8.960058e-06 ; sigma = 4.934675e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 2.388705e-06 ; sigma = 1.444777e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 1.851789e-06 ; sigma = 2.853540e-11 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.722470e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.230103e-03 ; sigma = 3.078573e-03 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.565192e-04 ; sigma = 1.304400e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 6.980003e-06 ; sigma = 2.811961e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 9.090878e-07 ; sigma = 1.466223e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 6.526033e-08 ; sigma = 9.720225e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
Entering product-state fixed-point CI iteration
Cycle 0: max grad = 4.722473e-02 ; sigma = 0.000000e+00 ; 0/2 fragment CI solvers converged
Cycle 1: max grad = 2.230102e-03 ; sigma = 3.078668e-03 ; 2/2 fragment CI solvers converged
Cycle 2: max grad = 1.565199e-04 ; sigma = 1.304408e-04 ; 2/2 fragment CI solvers converged
Cycle 3: max grad = 6.980050e-06 ; sigma = 2.811993e-07 ; 2/2 fragment CI solvers converged
Cycle 4: max grad = 9.090928e-07 ; sigma = 1.466224e-09 ; 2/2 fragment CI solvers converged
Cycle 5: max grad = 6.526078e-08 ; sigma = 9.805490e-12 ; 2/2 fragment CI solvers converged
Product_state fixed-point CI iteration converged after 5 cycles
LASCI state-average energy = -716.211702280792
LASCI state 0 energy = -716.323830039124
LASCI state 1 energy = -717.585140189668
LASCI state 2 energy = -717.585140263505
LASCI state 3 energy = -714.782200489685
LASCI state 4 energy = -714.78220042198
******** LAS space tables ********
LAS space 0: (16e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -716.323830039124
S^2 = 0.0000000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 1: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -717.585140189668
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+7e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 2: (16e+15e,20o) wfynsm=A
Converged? True
E(LAS) = -717.585140263505
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (8e+7e,10o)     2    A        1
LAS space 3: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -714.782200489685
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (9e+8e,10o)     2    A        1
    1   (8e+8e,10o)     1    A        1
LAS space 4: (17e+16e,20o) wfynsm=A
Converged? True
E(LAS) = -714.78220042198
S^2 = 0.7500000 (Pure)
Space table
 frag    (ae+be,no)  2S+1   ir   lroots
    0   (8e+8e,10o)     1    A        1
    1   (9e+8e,10o)     2    A        1
LASSI op_o0 memory check: 1709.058096 MB needed of 491783.886848 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
Symmetry analysis of 5 LAS rootspaces:
 ix            Energy  <S**2>  Neleca  Nelecb  Nelec   Wfnsym
  0   -716.3238300391   0.000      16      16      32       A
  1   -717.5851401897   0.750      16      15      31       A
  2   -717.5851402635   0.750      16      15      31       A
  3   -714.7822004897   0.750      17      16      33       A
  4   -714.7822004220   0.750      17      16      33       A
Build + diag H matrix LASSI symmetry block 0
['neleca', 'nelecb', 'irrep'] = (17, 16, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 123.54336 MB needed of 491744.94208 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 1
['neleca', 'nelecb', 'irrep'] = (16, 15, 0)
(2 rootspaces; 2 states)
LASSI op_o0 memory check: 1652.196096 MB needed of 491744.94208 MB available (500000 MB max)
2/2 linearly independent model states
Build + diag H matrix LASSI symmetry block 2
['neleca', 'nelecb', 'irrep'] = (16, 16, 0)
(1 rootspaces; 1 states)
LASSI eigenvalues (5 total):
 ix            Energy  <S**2>  Neleca  Nelecb  Wfnsym
  0   -717.5960190116   0.750      16      15       A
  1   -717.5742614416   0.750      16      15       A
  2   -716.3238300391   0.000      16      16       A
  3   -714.8346972443   0.750      17      16       A
  4   -714.7297036673   0.750      17      16       A
Building tPBE functional
Building tPBE functional
Periodic OT-FNAL class is used
LASSI op_o0 memory check: 1709.058096 MB needed of 491744.94208 MB available (500000 MB max)


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 0 E = -741.2290911982751, Eot(tPBE) = -84.09048537688167


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 1 E = -741.2116546339247, Eot(tPBE) = -84.10371507821034


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 2 E = -740.0757690727656, Eot(tPBE) = -85.29538679101582


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 3 E = -738.9187190831615, Eot(tPBE) = -86.44766519244644


******** <class 'pyscf.pbc.df.rsdf_builder._RSNucBuilder'> ********
mesh = [17 17 31] (8959 PWs)
ke_cutoff = 17.931038401301485
omega = 0.4583928119328632
exclude_d_aux = False
exclude_dd_block = True
j2c_eig_always = False
has_long_range = True
MC-PDFT state 4 E = -738.8288626120215, Eot(tPBE) = -86.48158803172176
